<template>
  <div class="yggl-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent class="search-form" ref="searchForm">
        <row :gutter="20">
          <!-- 职位名称 -->
          <i-col span="3">
            <FormItem prop="Name">
              <Input v-model="formItem.Name" placeholder="员工姓名" />
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="DepartmentName">
              <Select v-model="formItem.DepartmentName" placeholder="部门">
                <Option value="">全部</Option>
                <Option :value="item.ID" v-for="(item, index) in departmentsList" :key="index">{{item.Name}}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="SSQYID">
              <Select v-model="formItem.SSQYID" placeholder="区域">
                <Option v-for="item in SouSQYList" :value="item.ID" :key="item.ID" @click.native="SSQYchoose(item.ID)">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col v-show="isSee" span="3">
            <FormItem prop="SSMDID">
              <Select v-model="formItem.SSMDID" placeholder="门店">
                <Option v-for="item in SouSMDList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="IFYX">
              <Select v-model="formItem.IFYX" placeholder="是否有效">
                <Option value="1">是</Option>
                <Option value="0">否</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="9">
            <formItem class="btn-box">
              <Button type="primary" class="btn" @click="searchList">搜索</Button>
              <Button type="warning" class="btn" @click="resetSearch">重置</Button>
              <!-- <Button type="success" v-if="isDisable" class="btn" @click="ZJclick">转交</Button> -->
              <i-button type="primary" class="btn btn-add" @click="showAddPoup">添加</i-button>
              <i-button type="primary" class="btn btn-purple" @click="getDetail" :disabled="!rowID">修改</i-button>
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>

    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" :row-class-name="rowClassName" :height="setTableHeight" highlight-row ref="mainTable" @on-current-change="getRowID"></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
        <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
      </Select>
      <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
      <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
      <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
      <div class="page-box">
        <p>前往</p>
        <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
        <p>页</p>
      </div>
    </div>
    <!-- 新增弹窗 -->
    <Modal class="dialog" :mask-closable="false" :closable='false' v-model="modal1" :styles="{top: '20px'}" :width="1000">
      <div slot='header' class="header">
        {{modalTitle}}
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Image" label="员工照片：" :label-width="120">
              <div class="input-box">
                <div style="position:absolute;right:-10px;top:-10px; z-index:99;" @click="formValidate.Image = ''" v-if="formValidate.Image">
                  <Icon type="close-circled" style="font-size:20px;color:#666;"></Icon>
                </div>
                <img :src="formValidate.Image" v-if="formValidate.Image">
                <Icon type="camera" v-else class="icon-camera"></Icon>
                <input type="file" accept="image/gif,image/jpeg,image/jpg,image/png,image/svg" @change="uploadImg" ref="image">
              </div>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Name" label="员工姓名：" :rules="formValidateRule.Name">
              <Input v-model="formValidate.Name" placeholder="请输入" />
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="DepartmentID" label="部门：" :rules="formValidateRule.DepartmentID">
              <Select v-model="formValidate.DepartmentID" @on-change="getPosList">
                <Option v-for="item in departmentsList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="PositionID" label="职位：" :rules="formValidateRule.PositionID">
              <Select v-model="formValidate.PositionID" @on-change="changePositionID">
                <Option v-for="item in jobList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="Sex" label="性别：">
              <Select v-model="formValidate.Sex">
                <Option value="男">男</Option>
                <Option value="女">女</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Phone" label="电话：">
              <!-- <FormItem prop="Phone" label="电话："  :rules="formValidateRule.Phone"> -->
              <Input v-model="formValidate.Phone" placeholder="请输入" />
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="StoreID" label="所属门店：" :rules="formValidateRule.StoreID" v-if="storeList">
              <Select v-model="formValidate.StoreID" filterable>
                <!-- :disabled="!canEditStore" -->
                <Option v-for="item in storeList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <!-- <i-col span="11">
            <FormItem prop="IDCardNumber" label="身份证：">
              <FormItem prop="IDCardNumber" label="身份证："  :rules="formValidateRule.IDCardNumber">
              <Input v-model="formValidate.IDCardNumber" placeholder="请输入" />
            </FormItem>
          </i-col> -->
        </row>
        <row type="flex" justify="space-between">
          <!-- <i-col span="11">
            <FormItem prop="Birthday" label="生日：">
              <DatePicker type="date" placeholder="请选择" style="width:100%;" v-model="formValidate.Birthday"></DatePicker>
            </FormItem>
          </i-col> -->
          <i-col span="11">
            <FormItem prop="UserName" label="登录账号：" :rules="formValidateRule.UserName">
              <Input v-model="formValidate.UserName" placeholder="请输入" />
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="Password" label="登录密码：" :rules="formValidateRule.Password" v-if="modalTitle == '新建'">
              <Input v-model="formValidate.Password" placeholder="请输入" />
            </FormItem>
            <FormItem prop="Password" label="登录密码：" v-else>
              <Input v-model="formValidate.Password" placeholder="请输入" />
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="IsConsultation" label="是否接诊：" :rules="formValidateRule.IsConsultation">
              <RadioGroup v-model="formValidate.IsConsultation">
                <Radio :label="1">
                  <span>是</span>
                </Radio>
                <Radio :label="0">
                  <span>否</span>
                </Radio>
              </RadioGroup>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="Valid" label="是否有效：" :rules="formValidateRule.Valid">
              <RadioGroup v-model="formValidate.Valid">
                <Radio :label="1">
                  <span>是</span>
                </Radio>
                <Radio :label="0">
                  <span>否</span>
                </Radio>
              </RadioGroup>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between" v-if="modalTitle=='修改'">
          <i-col span="11">
            <FormItem prop="IsConsultation" label="客户转交：">
              <Tooltip max-width="200px">
                <span style="color:#79AA49;fontWeight:600">说明　</span>
                <div slot="content" style="white-space: normal;width:100%">
                  <span style="color:#63C6DD">是：</span>把当前护理师的客户转给其她护理老师;<br /><br />
                  <span style="color:#e5769c">否：</span>把护理师转到其它门店,当前护理师下面的客户所属护理师为空;<br /><br />
                  <span style="color:#fcb827">暂不转交：</span>把护理师转店其它门店，护理师下面的客户所属护理师不改变
                </div>
              </Tooltip>
              <RadioGroup v-model="khzjLabel" @on-change='RadioClick'>
                <Radio :label="2">
                  暂不转交
                </Radio>
                <Radio :label="0">
                  是
                </Radio>
                <!-- <Radio :label="1">
                  否
                </Radio> -->
              </RadioGroup>
              <div class='bfzjDiv' @click="ZJclick">部分转交</div>
            </FormItem>
          </i-col>
          <i-col span="11" v-if="khzjLabel==0">
            <FormItem prop="NewEmployeeID" label="转交护理师：">
              <Select v-model="NewEmployeeID">
                <Option v-for="item in NewEmployeeList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="quyuXZ" label="控制区域：" :label-width="120" v-show="yinC">
              <Select v-model="formValidate.quyuXZ" multiple @on-change="getArealsList()">
                <Option v-for="item in quYuList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="quyuXZMD" label="控制门店：" :label-width="120" v-show="yinC">
              <Select v-model="formValidate.quyuXZMD" multiple>
                <Option v-for="item in quYuMenDList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="Remark" label="备注：" :rules="formValidateRule.Remark">
              <Input v-model="formValidate.Remark" placeholder="请输入" type="textarea" :rows="4" />
            </FormItem>
          </i-col>
        </row>
      </Form>
      <div slot="footer" class="footer">
        <Button type="primary" class="btn" @click="addForm" :loading="loading">保存</Button>
        <Button type="warning" class="btn" @click="resetForm" :loading="loading">取消</Button>
      </div>
    </Modal>
    <!-- 转交弹框 -->
    <Modal class="dialog" v-model="modalZj" :closable='false' :mask-closable='false' title="转交客户名单" width="1000" :styles="{top: '20px'}">
      <Checkbox v-model="single" @on-change="Allchecked">全选</Checkbox>
      <div style="margin-top:20px" class="ZJKHName">
        <Checkbox style="margin-right:40px;margin-bottom:20px" v-for="(item,index) in ZJlist" :key="index" v-model="item.checked" @on-change="checked(item)">{{item.Name}}</Checkbox>
      </div>
      <Form ref="formValidateZJ" :model="formValidate" :label-width="120" @submit.native.prevent class="form" :rules="zjhlsRule">
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="ZJHLSID" label="选择转接护理师：">
              <Select v-model="formValidate.ZJHLSID">
                <Option v-for="item in ZJHLSlist" :value="item.employeeId" :key="item.employeeId">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
      </Form>
      <div slot="footer" class="footer">
        <Button type="primary" class="btn" :loading='ZJloading' @click="okZJ">保存</Button>
        <Button type="warning" class="btn" @click="cancelZJ">取消</Button>
      </div>
    </Modal>
    <Modal v-model="modalYG" title="修改员工名称" @on-ok="YGok" width="400">
      <!-- <Form :label-width="80"> -->
      <!-- <row type="flex" justify="space-between">
          <i-col span="24"> -->
      <!-- <FormItem prop="YGName" label="员工姓名："> -->
      <div style="display:flex;  align-items: center;">
        <div style=" flex-shrink: 0;margin-right: 10px;font-weight: 600;">员工姓名:</div>
        <Input v-model="YGName" />
      </div>
      <!-- </FormItem> -->
      <!-- </i-col>
        </row> -->
      <!-- </Form> -->
    </Modal>
    <!-- ** -->
  </div>
</template>
<script>
import btnQX from '@/api/btnQX.js';
import Exif from 'exif-js';
import api from '@/api/index.js';
import manager from '@/api/manager.js';
import { mapState } from 'vuex';
import moment from 'moment';
import echartsCommon from '@/api/Common.js';
export default {
  data() {
    const cardID = (rule, value, callback) => {
      let reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
      if (value === '') {
        callback(new Error('身份号不得为1空'));
      } else if (!reg.test(value)) {
        callback(new Error('身份证号格式有误'));
      } else {
        callback();
      }
    };
    const validateTel = (rule, value, callback) => {
      let reg = /^1\d{10}$/;
      if (value === '') {
        callback(new Error('手机号不得为空'));
      } else if (!reg.test(value)) {
        callback(new Error('请输入正确的手机号'));
      } else {
        callback();
      }
    };
    return {
      //单独修改员工名称
      modalYG: false,
      YGName: '',
      YGID: '',
      ///////////////
      ModalXZ: false,
      ////////////是否转交护理师
      khzjLabel: -1,
      NewEmployeeID: '',
      NewEmployeeList: [],
      ////////////////////
      isSee: false, //是否能看到门店
      isDisable: false,
      ZJHLSlist: [],
      single: false,
      ZJlist: [],
      checkList: [],
      modalZj: false,
      yinC: false,
      sCityId: '',
      isGroupDepart: false,
      canEditStore: true,
      tableLoading: false,
      loading: false,
      ZJloading: false,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      rowID: null,
      tableHeight: 200,
      modalTitle: '修改',
      phone: '',
      modal1: false,
      // 添加弹窗用
      formValidate: {
        ZJHLSID: '',
        Image: '',
        ID: '',
        Name: '',
        DepartmentID: '',
        PositionID: '',
        Sex: '女',
        Phone: '',
        IDCardNumber: '',
        UserName: '',
        Password: '123456',
        Valid: 1,
        IsConsultation: 1,
        StoreID: '',
        Remark: '',
        Birthday: '',
        quyuXZ: [],
        quyuXZMD: []
      },
      zjhlsRule: {
        ZJHLSID: {
          required: true,
          message: '转接护理师不能为空',
          trigger: 'blur'
        }
      },
      formValidateRule: {
        Name: { required: true, message: '员工姓名不得为空', trigger: 'blur' },
        DepartmentID: {
          required: true,
          message: '部门不得为空',
          trigger: 'blur'
        },
        PositionID: {
          required: true,
          message: '职位不得为空',
          trigger: 'blur'
        },
        UserName: {
          required: true,
          message: '登录账号不得为空',
          trigger: 'blur'
        },
        Password: {
          required: true,
          message: '登录密码不得为空',
          trigger: 'blur'
        },
        Valid: {
          required: true,
          message: '是否有效不得为空',
          trigger: 'blur',
          type: 'number'
        },
        IsConsultation: {
          required: true,
          message: '是否接诊不得为空',
          trigger: 'blur',
          type: 'number'
        },
        StoreID: {
          required: true,
          message: '所属门店不得为空',
          trigger: 'blur'
        },
        IDCardNumber: {
          required: true,
          message: '身份证不得为空',
          trigger: 'blur'
        },
        Phone: {
          required: true,
          message: '电话不得为空',
          trigger: 'blur',
          validator: validateTel
        }
      },
      formItem: {
        SSQYID: '0',
        SSMDID: null,
        IFYX: '',
        Name: '',
        DepartmentName: '',
        store: 'all',
        StoreID: '',
        Valid: '',
        city: '',
        area: '',
        areaID: ''
      },
      columns1: [
        // {
        //   title: '员工姓名',
        //   key: 'Name',
        //   width: 150,
        //   align: 'center',

        // },
        {
          title: '员工姓名',
          key: 'Name',
          width: 150,
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h('span', params.row.Name),
              // h('i', {
              //   class: {
              //     'ivu-icon': true,
              //     'ivu-icon-aaa-tianxie': true,
              //     'icon-btn': true
              //   },
              //   style: {
              //     color: '#ffb340',
              //     marginLeft: '10px',
              //     fontSize: '18px'
              //   },
              //   on: {
              //     click: () => {
              //       this.modalYG = true;
              //       this.YGName = params.row.Name;
              //       this.YGID = params.row.ID;
              //     }
              //   }
              // })
              h('Icon', {
                props: {
                  type: 'iconfont ivu-icon-aaa-tianxie',
                  size: '18'
                },
                style: {
                  color: '#ffb340',
                  cursor: 'pointer',
                  marginLeft: '10px'
                },
                on: {
                  click: () => {
                    this.modalYG = true;
                    this.YGName = params.row.Name;
                    this.YGID = params.row.ID;
                  }
                }
              })
            ]);
          }
        },

        {
          title: '是否接诊',
          key: 'IsConsultation',
          width: 100,
          align: 'center',
          render: (h, parmas) => {
            let text = parmas.row.IsConsultation ? '是' : '否';
            return h('div', {}, text);
          }
        },
        {
          title: '部门',
          key: 'DepartmentName',
          width: 160,
          align: 'center'
        },
        {
          title: '职位',
          key: 'PositionName',
          width: 160,
          align: 'center'
        },
        {
          title: '性别',
          key: 'Sex',
          width: 80,
          align: 'center'
        },
        {
          title: '电话',
          key: 'Phone',
          width: 140,
          align: 'center',
          render: (h, params) => {
            return echartsCommon.CustomerPhone(params.row.Phone);
          }
        },
        {
          title: '身份证',
          key: 'IDCardNumber',
          width: 200,
          align: 'center'
        },
        {
          title: '生日',
          key: 'Birthday',
          width: 140,
          align: 'center',
          render: (h, params) => {
            if (!params.row.Birthday) {
              return h('div', {}, '无');
            }
            return h('div', {}, moment(params.row.Birthday).format('YYYY-MM-DD'));
          }
        },
        {
          title: '登录账号',
          key: 'Account',
          width: 160,
          align: 'center'
        },
        {
          title: '是否有效',
          key: 'Valid',
          width: 100,
          align: 'center',
          render: (h, parmas) => {
            let text = parmas.row.Valid ? '是' : '否';
            return h('div', {}, text);
          }
        },
        {
          title: '是否绑定小程序',
          key: 'OpenID',
          width: 140,
          align: 'center',
          render: (h, parmas) => {
            let text = parmas.row.OpenID ? '是' : '否';
            return h('div', {}, text);
          }
        },
        {
          title: '所属门店',
          key: 'StoreName',
          width: 140,
          align: 'center'
        },
        {
          title: '备注',
          key: 'Remark',
          width: 140,
          align: 'center',
          render: (h, parmas) => {
            let text = parmas.row.Remark;
            if (text && text.length > 8) {
              text = text.substr(0, 7) + '...';
            }
            return h(
              'div',
              {
                on: {
                  click: () => {
                    this.showRemark(parmas.row.Remark);
                  }
                }
              },
              text
            );
          }
        },
        {
          title: ' ',
          width: 10
        }
      ],
      getPosType: 0,
      list: [],
      departmentsList: [],
      storeList: [],
      jobList: [],
      SouSQYList: [],
      SouSMDList: [],
      quYuList: [],
      quYuMenDList: [],
      positionId: ''
    };
  },
  computed: {
    ...mapState({
      userMes: (state) => state.app.userMes,
      authorList: (state) => state.app.authorList,
      tableRows: (state) => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    }
  },
  methods: {
    YGok() {
      let that = this;
      let data = {
        EmployeeId: this.YGID,
        BeauticianName: this.YGName
      };
      api.SingleEditEmName(data).then((res) => {
        if (res.error_code === 'Success') {
          that.$Message.success('修改成功');
          that.getList();
        } else {
          that.$Message.error(res.error_message);
        }
      });
      // console.log(this.YGName, this.YGID);
    },
    RadioClick(data) {
      if (data != 0) {
        this.NewEmployeeID = '';
      }
    },
    // 转交
    Allchecked() {
      this.checkList = [];
      this.ZJlist.forEach((v) => {
        if (this.single) {
          v.checked = true;
          this.checkList.push(v);
        } else {
          v.checked = false;
          this.checkList = [];
        }
      });
    },
    checked(data) {
      let arr = this.checkList;
      if (data.checked) {
        arr.push(data);
        if (arr.length == this.ZJlist.length) {
          this.single = true;
        }
      } else {
        arr.splice(data, 1);
        this.single = false;
      }
    },
    ZJclick() {
      let that = this;
      that.modalZj = true;
      that.modal1 = false;
      that.setAuthorAdd;
      let data = {
        employeeId: that.rowID,
        storeId: that.ZjstoreId
      };
      api.ByEmployeeIdQueryCust(data).then((res) => {
        if (res.error_code === 'Success') {
          that.ZJlist = res.data;
        } else {
          that.$Message.error(res.error_message);
        }
      });
      //获取护理师列表
      let data1 = {
        beauticianId: that.rowID,
        sType: '1',
        storeId: that.ZjstoreId
      };
      api.ByStoreIdQueryValidBeautician(data1).then((res) => {
        if (res.error_code === 'Success') {
          // console.log(res.data.listModelTo);
          that.ZJHLSlist = res.data.listModelTo;
        } else {
          that.$Message.error(res.error_message);
        }
      });
    },
    okZJ() {
      let that = this;
      that.$refs.formValidateZJ.validate((validate) => {
        if (validate) {
          that.ZJloading = true;
          let arr = [];
          that.checkList.forEach((v) => {
            arr.push(v.ID);
          });
          let data = {
            storeId: that.ZjstoreId,
            custListId: arr,
            employeeId: that.userMes.EmployeeID,
            beauticianId: that.rowID,
            beauticianIdTo: that.formValidate.ZJHLSID
          };
          api.AddListCustomerDeliverLog(data).then((res) => {
            if (res.error_code === 'Success') {
              that.$Message.success(res.error_code);
              that.restZJData();
            } else {
              that.$Message.error(res.error_message);
              that.restZJData();
            }
          });
        } else {
          that.$Message.error('转交护理师不能为空');
          return;
        }
      });
    },
    restZJData() {
      let that = this;
      that.modalZj = false;
      that.modal1 = true;
      that.single = false;
      that.checkList = [];
      that.formValidate.ZJHLSID = '';
      that.ZJloading = false;
    },
    cancelZJ() {
      this.restZJData();
    },
    /////////////////////////////////////////////////////////////////////////////////////////////////
    rowClassName(row) {
      //table增加单条颜色
      return echartsCommon.rowClassName(row.Valid, false);
    },
    SSQYchoose(id) {
      let that = this;
      if (id == '0') {
        that.isSee = false;
      } else {
        that.isSee = true; //显示门店选择框
      }
      that.formItem.SSMDID = null;
      that.formItem.SSQYID = id;
      that.getCity(id);
    },
    showAddPoup() {
      let that = this;
      that.yinC = false;
      that.positionId = '';
      that.resetForm();
      that.modal1 = true;
      that.modalTitle = '新建';
    },
    searchList() {
      let that = this;
      that.tablePage.page = 1;
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    modefyMessage(data) {
      let Modalcontent1 = '把护理师转到其它门店,当前护理师下面的客户所属护理师为空';
      let Modalcontent2 = '把护理师转店其它门店，护理师下面的客户所属护理师不改变';
      if (data.TransferType == 1 || data.TransferType == 2) {
        this.$Modal.confirm({
          title: '温馨提示',
          content: data.TransferType == 1 ? Modalcontent1 : Modalcontent2,
          loading: true,
          onOk: () => {
            this.XGsave(data);
          },
          onCancel: () => {
            this.loading = false;
          }
        });
      } else {
        this.XGsave(data);
      }
    },
    XGsave(data) {
      let that = this;
      manager.modefySingleEmployees(that.formValidate.ID, data).then((response) => {
        that.loading = false;
        if (response.error_code === 'Success') {
          that.$Modal.remove();
          that.$Message.success('修改成功');
          that.resetForm();
          that.getList();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.$refs.image.value = '';
      that.getPosType = 0;
      that.khzjLabel = -1;
      that.formValidate.ID = '';
      that.NewEmployeeID = '';
      that.formValidate.StoreID = null;
      that.jobList = [];
      that.storeList = [];
      that.canEditStore = true;
      that.modal1 = false;
      that.formValidate.quyuXZ = [];
      that.formValidate.quyuXZMD = [];
    },
    addForm() {
      let that = this;
      that.$refs.formValidate1.validate((validate) => {
        if (validate) {
          let data = {
            Image: that.formValidate.Image,
            Name: that.formValidate.Name,
            DepartmentID: that.formValidate.DepartmentID,
            PositionID: that.formValidate.PositionID,
            Sex: that.formValidate.Sex,
            Phone: that.formValidate.Phone,
            IDCardNumber: that.formValidate.IDCardNumber,
            UserName: that.formValidate.UserName,
            Password: that.formValidate.Password,
            Valid: that.formValidate.Valid > 0 ? true : false,
            IsConsultation: that.formValidate.IsConsultation > 0 ? true : false,
            StoreID: that.isGroupDepart ? '' : that.formValidate.StoreID, // 集团部门没有门店
            Remark: that.formValidate.Remark,
            Birthday: that.formValidate.Birthday,
            powerModels: {
              Area: that.formValidate.quyuXZ,
              StoreIds: that.formValidate.quyuXZMD
            },
            //新增
            TransferType: that.khzjLabel,
            TransferToPer: that.NewEmployeeID,
            HandlerID: that.userMes.EmployeeID,
            HandlerName: that.userMes.EmployeeName,
            jsonData: this.jsonP()
          };
          if (data.Birthday) {
            data.Birthday = moment(data.Birthday).format('YYYY-MM-DD');
          }
          that.loading = true;
          if (that.formValidate.ID) {
            that.modefyMessage(data);
            return false;
          }
          manager.addEmployees(data).then((response) => {
            that.loading = false;
            if (response.error_code === 'Success') {
              that.$Message.success('添加成功');
              that.resetForm();
              that.getList();
            } else {
              that.$Message.error(response.error_message);
            }
          });
        } else {
          this.$Message.error('有必填项为空');
        }
      });
    },
    jsonP() {
      let p = {
        touser: 'oNA2m5OaKFq9rUuC43KVi-yjQXDs',
        template_id: 'mFZ2vrY2IlyDDnu6sDT98k_Xu6AY5Q3o9c-di3LuT_A',
        page: 'pages/mine/mine',
        data: {
          time1: { value: '2020-07-29 10:38' },
          thing2: { value: '原护理师张三,现护理师李四' },
          thing3: { value: '原护理师已转店' }
        }
      };
      return JSON.stringify(p);
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById('tableBox').offsetHeight;
      window.onresize = function () {
        that.tableHeight = document.getElementById('tableBox').offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum = endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error('已经是第一页');
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error('已经是最后一页');
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      that.tableLoading = true;
      let vueData = that.formItem;
      let data = {
        sValid: vueData.IFYX,
        EmployeeID: that.userMes.EmployeeID,
        page: that.tablePage.page,
        size: that.tablePage.pageNum,
        Name: vueData.Name,
        DepartmentID: vueData.DepartmentName,
        Area: vueData.SSQYID,
        StoreID: vueData.SSMDID == undefined ? null : vueData.SSMDID
      };
      manager.getEmployeesList(data).then((response) => {
        that.tableLoading = false;
        if (response.error_code === 'Success') {
          let res = response.data;
          that.list = res.list;
          that.tablePage.page = res.page;
          that.tablePage.allNum = res.total;
          that.tablePage.maxPageNum = res.totalPage;
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getRowID(row) {
      let that = this;
      that.rowID = row.ID;
      that.ZjstoreId = row.StoreID;
    },
    getDetail(row) {
      let that = this;
      that.yinC = false;
      if (!that.rowID) {
        that.$Message.error('请选择一条记录');
        return false;
      }
      // that.resetForm();
      that.modal1 = true;
      that.$store.commit('changeLoadingPage');
      manager.getSingleEmployees(that.rowID).then((response) => {
        that.$store.commit('changeLoadingPage');
        if (response.error_code === 'Success') {
          let res = response.data;
          that.NewEmployeeList = res.NewEmployee;
          that.positionId = res.PositionID;
          if (!res.HeadImage) {
            res.HeadImage = '';
          } else {
            res.HeadImage = 'data:image/jpeg;base64,' + res.HeadImage;
          }
          // 修改员工时若存在门店时，门店不可修改
          //2018-11-11  张奕伦  去掉这个限制
          // if (res.StoreID) {
          //     that.canEditStore = false
          // }

          let powerModels = res.powerModels;
          let arr1 = [];
          let arr2 = [];
          if (res.powerModels == null) {
            arr1 = [];
            arr2 = [];
          } else {
            for (let i = 0; i < powerModels.length; i++) {
              arr1.push(Number(powerModels[i].Area));
              arr2 = arr2.concat(powerModels[i].StoreIds);
            }
          }
          that.formValidate = {
            Image: res.HeadImage,
            Birthday: res.Birthday,
            ID: res.ID,
            Name: res.Name,
            DepartmentID: res.DepartmentID,
            PositionID: res.PositionID,
            Sex: res.Sex,
            Phone: res.Phone,
            IDCardNumber: res.IDCardNumber,
            UserName: res.UserName,
            Password: res.Password,
            Valid: res.Valid ? 1 : 0,
            IsConsultation: res.IsConsultation ? 1 : 0,
            StoreID: res.StoreID,
            Remark: res.Remark,
            quyuXZ: arr1,
            quyuXZMD: arr2
          };
          that.getPosType = 0;
          that.getPosList(res.DepartmentID);
          that.modalTitle = '修改';
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getStoreList() {
      let that = this;
      api.getValidStores().then((response) => {
        if (response.error_code === 'Success') {
          that.storeList = response.data.list;
        } else {
          this.$Message.error(response.error_message);
        }
      });
    },
    getDepartmentsList() {
      // 获取部门下拉列表
      let that = this;
      manager.getValidDepartmentsList().then((response) => {
        if (response.error_code === 'Success') {
          that.departmentsList = response.data.list;
        } else {
          this.$Message.error(response.error_message);
        }
      });
    },
    getPosList(val) {
      let that = this;
      if (!val) {
        return false;
      }
      let data = {
        departmentID: val,
        EmployeeID: that.userMes.EmployeeID
      };
      // 更换部门ID时清空职位、门店
      // if (that.modalTitle === '新增') {
      //     that.formValidate.StoreID = ''
      //     that.formValidate.PositionID = ''
      // }
      that.getPosType++;
      // 获取部门门店 修改时清空门店ID
      if (that.getPosType > 1 && that.modalTitle === '新增') {
        that.formValidate.StoreID = '';
      }
      manager.getStoresByDepartmentsID(data).then((response) => {
        // 集团部门没有门店
        if (response.error_code === 'Success') {
          that.storeList = response.data.list;
          if (response.data.list) {
            that.isGroupDepart = false;
          } else {
            that.isGroupDepart = true;
          }
        } else {
          this.$Message.error(response.error_message);
        }
      });
      //   if (that.getPosType > 1) {
      //     that.formValidate.PositionID = "";
      //   }
      manager.getPositionsByDepartmentID(data).then((response) => {
        if (response.error_code === 'Success') {
          that.jobList = response.data.list;

          for (let index = 0; index < that.jobList.length; index++) {
            if (that.positionId === that.jobList[index].ID) {
              if (that.jobList[index].DataRangeTypeID === 4) {
                that.yinC = true;
                break;
              } else {
                that.yinC = false;
              }
            }
          }

          that.modal1 = true;
        } else {
          this.$Message.error(response.error_message);
        }
        //添加联动
        if (val == '00007') {
          that.formValidate.PositionID = '00024';
        }
        if (val == '00008') {
          that.formValidate.PositionID = '00026';
        }
        //------
      });
    },
    changePositionID(val) {
      let that = this;
      for (let index = 0; index < that.jobList.length; index++) {
        if (val === that.jobList[index].ID) {
          if (that.jobList[index].DataRangeTypeID === 4) {
            that.yinC = true;
            break;
          } else {
            that.yinC = false;
          }
        }
      }
      // if (val == "00034") {

      //   that.yinC = true;
      // } else {
      //   that.yinC = false;
      // }
    },
    uploadImg(e) {
      let that = this;
      let files = e.target.files || e.dataTransfer.files;
      if (!files.length) return;
      this.imgPreview(files[0]);
    },
    imgPreview(file) {
      let that = this;
      let Orientation;
      // 去获取拍照时的信息，解决拍出来的照片旋转问题
      Exif.getData(file, function () {
        Orientation = Exif.getTag(this, 'Orientation');
      });
      // 看支持不支持FileReader
      if (!file || !window.FileReader) return;
      if (/^image/.test(file.type)) {
        // 创建一个reader
        let reader = new FileReader();
        // 将图片2将转成 base64 格式
        reader.readAsDataURL(file);
        // 读取成功后的回调
        reader.onloadend = function () {
          let result = this.result;
          let img = new Image();
          img.src = result;
          // 判断图片是否大于100K,是就直接上传，反之压缩图片
          if (this.result.length <= 100 * 1024) {
            that.formValidate.Image = result;
          } else {
            img.onload = function () {
              let data = that.compress(img, Orientation);
              that.formValidate.Image = data;
            };
          }
        };
      }
    },
    rotateImg(img, direction, canvas) {
      // 最小与最大旋转方向，图片旋转4次后回到原方向
      const minStep = 0;
      const maxStep = 3;
      if (img == null) return;
      // img的高度和宽度不能在img元素隐藏后获取，否则会出错
      let height = img.height;
      let width = img.width;
      let step = 2;
      if (step == null) {
        step = minStep;
      }
      if (direction === 'right') {
        step++;
        // 旋转到原位置，即超过最大值
        step > maxStep && (step = minStep);
      } else {
        step--;
        step < minStep && (step = maxStep);
      }
      // 旋转角度以弧度值为参数
      let degree = (step * 90 * Math.PI) / 180;
      let ctx = canvas.getContext('2d');
      switch (step) {
        case 0:
          canvas.width = width;
          canvas.height = height;
          ctx.drawImage(img, 0, 0);
          break;
        case 1:
          canvas.width = height;
          canvas.height = width;
          ctx.rotate(degree);
          ctx.drawImage(img, 0, -height);
          break;
        case 2:
          canvas.width = width;
          canvas.height = height;
          ctx.rotate(degree);
          ctx.drawImage(img, -width, -height);
          break;
        case 3:
          canvas.width = height;
          canvas.height = width;
          ctx.rotate(degree);
          ctx.drawImage(img, -width, 0);
          break;
      }
    },
    compress(img, Orientation) {
      let canvas = document.createElement('canvas');
      let ctx = canvas.getContext('2d');
      // 瓦片canvas
      let tCanvas = document.createElement('canvas');
      let tctx = tCanvas.getContext('2d');
      let initSize = img.src.length;
      let width = img.width;
      let height = img.height;
      // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      let ratio;
      if ((ratio = (width * height) / 4000000) > 1) {
        ratio = Math.sqrt(ratio);
        width /= ratio;
        height /= ratio;
      } else {
        ratio = 1;
      }
      canvas.width = width;
      canvas.height = height;
      // 铺底色
      ctx.fillStyle = '#fff';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      // 如果图片像素大于100万则使用瓦片绘制
      let count;
      if ((count = (width * height) / 1000000) > 1) {
        count = ~~(Math.sqrt(count) + 1); // 计算要分成多少块瓦片
        // 计算每块瓦片的宽和高
        let nw = ~~(width / count);
        let nh = ~~(height / count);
        tCanvas.width = nw;
        tCanvas.height = nh;
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < count; j++) {
            tctx.drawImage(img, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);
            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
          }
        }
      } else {
        ctx.drawImage(img, 0, 0, width, height);
      }
      // 修复ios上传图片的时候 被旋转的问题
      if (Orientation !== '' && Orientation !== 1) {
        switch (Orientation) {
          case 6: // 需要顺时针（向左）90度旋转
            this.rotateImg(img, 'left', canvas);
            break;
          case 8: // 需要逆时针（向右）90度旋转
            this.rotateImg(img, 'right', canvas);
            break;
          case 3: // 需要180度旋转
            this.rotateImg(img, 'right', canvas); // 转两次
            this.rotateImg(img, 'right', canvas);
            break;
        }
      }
      // 进行最小压缩
      let ndata = canvas.toDataURL('image/jpeg', 0.5);
      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
      return ndata;
    },
    showRemark(text) {
      // 显示备注
      let that = this;
      that.$Modal.info({
        title: '详情',
        content: text
      });
    },
    getQYList() {
      // 获取区域下拉
      let that = this;
      api.GetAllCityInfo().then((response) => {
        if (response.error_code === 'Success') {
          that.quYuList = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getArealsList() {
      // 获取区域门店下拉
      let that = this;
      if (that.formValidate.quyuXZ.length <= 0) {
        that.quYuMenDList = [];
        return;
      }
      let data = {
        listCity: that.formValidate.quyuXZ
      };
      api.getStoreInfoCity(data).then((response) => {
        if (response.error_code === 'Success') {
          that.quYuMenDList = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    // 获取搜索区域列表
    getStore() {
      let that = this;
      let data = {
        employeeId: that.userMes.EmployeeID,
        sCity: ''
      };
      api.NewGetAllCityInfo(data).then((response) => {
        if (response.error_code === 'Success') {
          that.SouSQYList = response.data.list;
          let a = {
            ID: '0',
            Name: '所有'
          };
          that.SouSQYList.unshift(a);
          // that.formItem.sCityName = that.storeList[0].Name;
          // that.formItem.sCity = that.storeList[0].ID;
          //that.getCity();            2019年12月15日14:14:19 ly 注释
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    // 获取搜索有效门店
    getCity(id) {
      let that = this;
      let data = {
        sCity: id,
        employeeId: that.userMes.EmployeeID
      };
      api.baogetEmployeeByAllStoreInfo(data).then((res) => {
        if (res.error_code === 'Success') {
          that.SouSMDList = [];
          that.SouSMDList = res.data.list;
          // that.formItem.store = that.userMes.StoreName;
          // that.formItem.storeID = that.userMes.StoreID;
          // that.storeID = that.userMes.StoreID;
        } else {
          that.$Message.error(res.error_message);
        }
      });
    }
  },
  mounted() {
    let that = this;
    that.isDisable = btnQX.apiUrlList('ByStoreIdQueryValidBeautician');
    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
      that.getStoreList();
      that.getDepartmentsList();
      that.getQYList();
      that.getStore();
    });
  }
};
</script>
<style>
.ZJKHName {
  height: 400px;
  overflow: auto;
  margin-bottom: 30px;
}
.input-box {
  position: relative;
  width: 60px;
  height: 60px;
  border: 2px dashed #dddee1;
  text-align: center;
}
.input-box:hover {
  border-color: #79aa49;
  cursor: pointer;
}
.input-box input[type='file'] {
  position: absolute;
  width: 100%;
  height: 100%;
  outline: none;
  display: block;
  left: 0;
  top: 0;
  opacity: 0;
}
.input-box input[type='file']:hover {
  cursor: pointer;
}
.input-box > img {
  position: relative;
  vertical-align: top;
  width: 100%;
  height: 100%;
}
.icon-camera {
  font-size: 32px;
  line-height: 60px;
  color: #666;
}
.bfzjDiv {
  color: blue;
  font-weight: 600;
}
.bfzjDiv:hover {
  cursor: pointer;
}
.zjModal {
  z-index: 1002;
}
.xzModal {
  z-index: 1001;
}
</style>
