<template>
    <div class="sf-container container">
        <div class="search-box">
            <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
                <row :gutter="20">
                    <!-- <i-col span="3">
                        <formItem prop="startDate">
                            <DatePicker type="date" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col>
                    <i-col span="3">
                        <formItem prop="endDate">
                            <DatePicker type="date" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col> -->
                    <i-col span="3">
                        <FormItem prop="userName">
                            <Input v-model="formItem.userName" placeholder="姓名"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="3">
                        <FormItem prop="userTel">
                            <Input v-model="formItem.userTel" placeholder="电话"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="18">
                        <formItem class="btn-box">
                            <i-button type="primary" class="btn btn-search" @click="searchForm" :loading="loading">搜索</i-button>
                            <i-button type="warning" class="btn btn-reset" @click="resetSearch" :loading="loading">重置</i-button>
                            <i-button type="primary" class="btn btn-add" @click="checkBillStatus" :loading="loading" v-if="setAuthorEdit" :disabled="!rowID">执行</i-button>
                        </formItem>
                    </i-col>
                </row>
            </Form>
        </div>
        <div class="table-box" id="tableBox" >
            <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable" @on-current-change="getRowID"></Table>
            <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
        </div>
        <div class="bottom-box">
            <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
            <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
                <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
            </Select>
            <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
            <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
            <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
            <div class="page-box">
                <p>前往</p>
                 <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page"  @on-change="changePage"></Input-number>
                <p>页</p>
            </div>
        </div>
        <!-- 弹窗 -->
        <Modal :mask-closable="false"  v-model="modal1" class="dialog" width="1200" class-name="vertical-center-modal">
            <div slot='header' class="header not-print">
                新增
            </div>
            <div slot='close' class="close not-print">
                <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
            </div>
            <!-- 用户信息部分 不可修改 -->
            <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form" >
                <row type="flex" justify="space-between">
                    <i-col span="11">
                        <FormItem prop="CustomerPhone" label="电话：">
                            <Input v-model="formValidate.CustomerPhone" placeholder="电话" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="11">
                        <FormItem prop="CustomerName" label="姓名：">
                            <Input v-model="formValidate.CustomerName" placeholder="姓名" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                </row>
                <row type="flex" justify="space-between">
                    <i-col span="11">
                        <FormItem label="年龄：" prop="CustomerAge">
                            <Input v-model="formValidate.CustomerAge" placeholder="年龄" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="11">
                        <FormItem prop="CustomerSex" label="性别：">
                            <Input v-model="formValidate.CustomerSex" placeholder="性别" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                </row>
                <row type="flex" justify="space-between">
                    <i-col span="11">
                        <FormItem label="渠道咨询：" prop="TMKEMployeeName">
                            <Input v-model="formValidate.TMKEMployeeName" placeholder="渠道咨询" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="11">
                        <FormItem label="美肤总监：" prop="SceneEmployeeName">
                            <Input v-model="formValidate.SceneEmployeeName" placeholder="美肤总监" :disabled="true"></Input>
                        </FormItem>
                    </i-col>
                </row>
                <!-- ** -->
            </Form>
            <!-- 收费表格 -->
            <div class="table-box hide-print">
                <i-table stripe :columns="chargeTableHead" :data="chargeTableData"></i-table>
            </div>
            <Input v-model="formValidate.Remark" placeholder="备注" type="textarea" :rows="4" style="margin-top:20px;"></Input>
            <!-- ** -->
            <div slot="footer" class="footer not-print">
                <Button class="btn-sure" type="primary" @click="addForm" :loading="loading">保存</Button>
                <Button class="btn-cancel" type="warning" @click="resetForm" :loading="loading">取消</Button>
            </div>
        </Modal>
    </div>
</template>
<script>
import Vue from "vue";
import api from "@/api/index.js";
import moment from "moment";
import { mapState } from "vuex";
export default {
  data() {
    return {
      rowID: null,
      loading: false,
      tableLoading: false,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      tableHeight: 200,
      modal1: false,
      formValidate: {
        CustomerPhone: "",
        CustomerName: "",
        CustomerAge: "",
        CustomerSex: "",
        TMKEMployeeName: "",
        SceneEmployeeName: ""
      },
      formItem: {
        // startDate: new Date(),
        // endDate: new Date(),
        name: ""
      },
      columns1: [
        {
          title: "收费日期",
          key: "Date",
          align: "center",
          width: 180,
          render: (h, params) => {
            if (!params.row.Date) {
              return h("div", {}, "");
            }
            return h(
              "div",
              {},
              moment(params.row.Date).format("YYYY-MM-DD HH:mm:ss")
            );
          }
        },
        {
          title: "客户姓名",
          width: 180,
          key: "CustomerName",
          align: "center"
        },
        {
          title: "性别",
          width: 100,
          key: "CustomerSex",
          align: "center"
        },
        {
          title: "年龄",
          width: 100,
          key: "CustomerAge",
          align: "center"
        },
        {
          title: "电话",
          width: 150,
          key: "CustomerPhone",
          align: "center"
        },
        {
          title: "项目名称",
          width: 280,
          key: "ItemName",
          align: "center",
          render: (h, params) => {
            if (!params.row.ItemName) {
              return "";
            }
            let text = params.row.ItemName;
            if (text.length > 20) {
              text = text.substr(0, 20) + "...";
            }
            return h(
              "Tooltip",
              {
                props: {
                  content: params.row.ItemName,
                  placement: "top"
                }
              },
              text
            );
          }
        },
        {
          title: "项目规格",
          width: 150,
          key: "ItemStandard",
          align: "center"
        },
        {
          title: "项目单位",
          width: 150,
          key: "ItemUnit",
          align: "center"
        },
        {
          title: "剩余次数",
          width: 100,
          key: "RemainingTimes",
          align: "center"
        },
        {
          title: "执行状态",
          width: 150,
          key: "ExecuteStatusName",
          align: "center"
        },
        // {
        //     title: '操作',
        //     align: 'center',
        //     render: (h, parmas) => {

        //         return h('i', {
        //             class: {
        //                 'ivu-icon': true,
        //                 'ivu-icon-aaa-zhihang': true,
        //                 'icon-btn': true
        //             },
        //             on: {
        //                 click: () => {
        //                     this.checkBillStatus(parmas.row)
        //                 }
        //             }
        //         })
        //     }
        // },
        {
          title: " "
        }
      ],
      list: [],
      // 弹窗表格数据
      chargeTableHead: [
        {
          title: "项目名称",
          align: "center",
          key: "ItemName",
          width: 150
        },
        {
          title: "规格",
          align: "center",
          key: "ItemStandard",
          width: 100
        },
        {
          title: "剩余数量",
          align: "center",
          key: "RemainingTimes",
          width: 100
        },
        {
          title: "选择仪器",
          align: "center",
          key: "DeviceID",
          width: 200,
          render: (h, params) => {
            let that = this;
            return h("div", [
              h(
                "Select",
                {
                  props: {
                    value: that.chargeTableData[params.index].DeviceID
                  },
                  style: {
                    width: "100%"
                  },
                  on: {
                    "on-change": event => {
                      that.chargeTableData[params.index].DeviceID = event;
                    }
                  }
                },
                that.yqList.map(function(type) {
                  return h(
                    "Option",
                    {
                      props: {
                        value: type.ID
                      }
                    },
                    type.Name
                  );
                })
              )
            ]);
          }
        },
        {
          title: "美容师",
          align: "center",
          key: "BeauticianID",
          width: 200,
          render: (h, params) => {
            let that = this;
            return h("div", [
              h(
                "Select",
                {
                  props: {
                    value: that.chargeTableData[params.index].BeauticianID
                  },
                  style: {
                    width: "100%"
                  },
                  on: {
                    "on-change": event => {
                      that.chargeTableData[params.index].BeauticianID = event;
                    }
                  }
                },
                that.msrList.map(function(type) {
                  return h(
                    "Option",
                    {
                      props: {
                        value: type.ID
                      }
                    },
                    type.Name
                  );
                })
              )
            ]);
          }
        },
        {
          title: "执行日期",
          align: "center",
          key: "Date",
          width: 200,
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("DatePicker", {
                props: {
                  type: "date",
                  value: that.chargeTableData[params.index].Date
                },
                style: {
                  width: "100%"
                },
                on: {
                  "on-change": event => {
                    that.chargeTableData[params.index].Date = event;
                  }
                }
              })
            ]);
          }
        },
        {
          title: "执行数量",
          align: "center",
          key: "ExecuteQuantity",
          width: 120,
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("InputNumber", {
                props: {
                  value: that.chargeTableData[params.index].ExecuteQuantity,
                  max: that.chargeTableData[params.index].RemainingTimes,
                  min: 1,
                  step: 1
                },
                style: {
                  width: "100%"
                },
                on: {
                  input: e => {
                    that.chargeTableData[params.index].ExecuteQuantity = e;
                  }
                }
              })
            ]);
          }
        },
        {
          title: " ",
          align: "right",
          key: ""
        }
      ],
      chargeTableData: [],
      yqList: [],
      msrList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows,
      authorList: state => state.app.authorList
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    setAuthorEdit() {
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "增加") {
            return i.IsVisible;
            break;
          }
        }
      } else {
        return false;
      }
    }
  },
  methods: {
    handleSpinShow() {
      // 加载框
      let that = this;
      that.$store.commit("changeLoadingPage");
    },
    hideSpin() {
      // 隐藏
      let that = this;
      that.$store.commit("changeLoadingPage");
    },
    searchForm() {
      // 搜索表格
      let that = this;
      // if (that.formItem.startDate && that.formItem.endDate) {
      //     // 两者同时存在
      //     if (Number(that.formItem.startDate) > Number(that.formItem.endDate)) {
      //         that.$Message.error('开始日期不得大于结束日期')
      //         return false
      //     }
      // }
      that.tablePage.page = 1;
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.formValidate.Remark = "";
      that.chargeTableData = [];
      that.modal1 = false;
    },
    getRowID(row) {
      // 单击表格获取记录ID
      let that = this;
      that.rowID = row.CertainProjectID;
    },
    checkBillStatus() {
      let that = this;
      if (!that.rowID) {
        that.$Message.error("请选择一条记录");
        return false;
      }
      that.getDetail(that.rowID);
      // that.getDetail(row.CertainProjectID)
    },
    addForm() {
      let that = this;
      let isBreak = false;
      for (let i in that.chargeTableData) {
        let dom = that.chargeTableData[i];
        if (!dom.DeviceID || !dom.BeauticianID) {
          that.$Message.error("有必须填项为空");
          isBreak = true;
        }
      }
      if (isBreak) {
        return false;
      }
      let arr = that.chargeTableData[0];
      let data = {
        CertainProjectID: arr.ID,
        Date: moment(arr.Date).format("YYYY-MM-DD"),
        HandleBy: that.userMes.EmployeeID,
        DeviceID: arr.DeviceID,
        ExecuteQuantity: arr.ExecuteQuantity,
        BeauticianID: arr.BeauticianID,
        Remark: that.formValidate.Remark
      };
      that.loading = true;
      api.addExecutionRecord(data).then(response => {
        that.loading = false;
        if (response.error_code === "Success") {
          that.$Message.success("添加成功");
          that.resetForm();
          that.getList();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    printPage() {
      // let that = this
      window.print();
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID,
        // StartDate: that.formItem.startDate,
        // endDate: that.formItem.endDate,
        CustomerName: that.formItem.userName,
        CustomerPhone: that.formItem.userTel,
        page: that.tablePage.page,
        size: that.tablePage.pageNum
      };
      // // 转换日期
      // if (data.StartDate) {
      //     data.StartDate = moment(data.StartDate).format('YYYY-MM-DD')
      // }
      // if (data.EndDate) {
      //     data.EndDate = moment(data.EndDate).format('YYYY-MM-DD')
      // }
      if (data.CustomerPhone) {
        let regex = /^1\d{10}$/;
        if (!regex.test(data.CustomerPhone)) {
          that.$Message.error("电话号码格式有误");
          return false;
        }
      }
      that.tableLoading = true;
      api.waitForExecuteRecordGetList(data).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          for (let i of res.list) {
            let phone = i.CustomerPhone;
            i.CustomerPhone =
              phone.substring(0, 3) + "****" + phone.substr(phone.length - 4);
          }
          that.list = res.list;
          that.tableLoading = false;
          that.$set(that.tablePage, "page", res.page);
          that.$set(that.tablePage, "allNum", res.total);
          that.tablePage.maxPageNum = res.totalPage;
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getDetail(id) {
      // 获取确诊单详情
      let that = this;
      that.handleSpinShow();
      api.getWaitForExecuteRecord(id).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          let a = {
            ID: res.CertainProjectID,
            ItemName: res.ItemName,
            ItemStandard: res.ItemStandard,
            RemainingTimes: res.RemainingTimes,
            DeviceID: "",
            BeauticianID: "",
            Date: new Date(),
            ExecuteQuantity: 1
          };
          that.chargeTableData.pop();
          that.chargeTableData.push(a);
          that.searchCustomerTel(res.CustomerPhone);
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    setData(res) {
      let that = this;
      that.formValidate.CustomerName = res.Name;
      that.formValidate.CustomerAge = res.Age;
      that.formValidate.CustomerPhone = res.Phone;
      that.formValidate.CustomerSex = res.Sex;
      that.formValidate.TMKEmployeeName = res.TMKEmployeeName;
      that.formValidate.SceneEmployeeName = res.SceneEmployeeName;
      that.hideSpin();
      that.modal1 = true;
    },
    searchCustomerTel(tel) {
      let that = this;
      // 搜索...
      let data = {
        CustomerPhone: tel,
        EmployeeID: that.userMes.EmployeeID
      };
      api.getCustomerByPhone(data).then(response => {
        let a = {
          Name: "",
          Age: "",
          Phone: data.CustomerPhone,
          CustomerSex: ""
        };
        if (response.error_code === "Success") {
          that.formValidate.CustomerID = response.data.ID;
          a = response.data;
          that.setData(a);
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getDevices() {
      // 获取设备列表
      let that = this;
      api.getDevices().then(response => {
        if (response.error_code === "Success") {
          that.yqList = response.data.list;
        } else {
          that.$Message.error(response.error_messager);
        }
      });
    },
    getMsrList() {
      // 获取美容师列表
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID
      };
      api.getBeauticiansByEmployeeID(data).then(response => {
        if (response.error_code === "Success") {
          that.msrList = response.data.list;
        } else {
          that.$Message.error(response.error_messager);
        }
      });
    }
  },
  mounted() {
    let that = this;

    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
      that.getDevices();
      that.getMsrList();
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
    });
  },
  activated() {
    let that = this;
    that.$nextTick(() => {
      let phone = that.$route.params.phone;
      if (phone) {
        // 快捷菜单
        that.formItem.userTel = phone;
        // that.$store.commit('changeLoadingPage')
        setTimeout(() => {
          that.getList();
        }, 300);
      }
    });
  }
};
</script>

<style>
#tableBox{

}
</style>
