import Vue from 'vue';
import iView from 'iview';
import Util from '../libs/util';
import VueRouter from 'vue-router';
import Cookies from 'js-cookie';
import {routers, otherRouter, appRouter} from './router';

Vue.use(VueRouter);

// 路由配置
const RouterConfig = {
    // mode: 'history',
    routes: routers
};

export const router = new VueRouter(RouterConfig);

router.beforeEach((to, from, next) => {
    iView.LoadingBar.start();
    Util.title(to.meta.title);
    if (Cookies.get('locking') === '1' && to.name !== 'locking') { // 判断当前是否是锁定状态
        next({
            replace: true,
            name: 'locking'
        });
    } else if (Cookies.get('locking') === '0' && to.name === 'locking') {
        next(false);
    } else {
        if (!Cookies.get('user') && to.name !== 'login') { // 判断是否已经登录且前往的页面不是登录页
            return next({
                name: 'login'
            });
        } else if (Cookies.get('user') && to.name === 'login') { // 判断是否已经登录且前往的是登录页
            Util.title();
            return next({
                name: 'home_index'
            });
        }
        //  else if ((!sessionStorage.getItem('qxList') || !sessionStorage.getItem('menuList') ||  !sessionStorage.getItem('pageRole')) && to.name !== 'login') {
        //     // 无缓存权限侧边栏权限 跳转登陆
        //     next({
        //         name: 'login'
        //     });
        // } 
        else {
            const curRouterObj = Util.getRouterObjByName([otherRouter, ...appRouter], to.name);
            if (to.name === 'error-403' || to.name === 'error-404' || to.name === 'login') {
                // Util.toDefaultPage([otherRouter, ...appRouter], to.name, router, next);
                return next()
            }
            let role = sessionStorage.getItem('qxList')
            let index = -1
            if(role) {
                role = JSON.parse(role)
                // console.log(curRouterObj)
                if (role.indexOf(curRouterObj.name) > -1) {
                    // 有权限 通过
                     // 如果在地址栏输入的是一级菜单则默认打开其第一个二级菜单的页面
                    Util.toDefaultPage([otherRouter, ...appRouter], to.name, router, next);
                    return next();
                } else {
                    // 跳转403
                    return next({
                        replace: true,
                        name: 'error-403'
                    });
                }
            } else {
                // 本地无权限列表
                sessionStorage.clear()
                let keys=document.cookie.match(/[^ =;]+(?=\=)/g)
                if (keys) {
                    for (let i = keys.length; i--;) {
                        document.cookie = keys[i] + '=0;expires=' + new Date( 0).toUTCString()
                    }
                }
                return next({
                    name: 'login'
                });
            }
            // if (curRouterObj && curRouterObj.access !== undefined) { // 需要判断权限的路由
            //     if (curRouterObj.access === parseInt(Cookies.get('access'))) {
            //         Util.toDefaultPage([otherRouter, ...appRouter], to.name, router, next); // 如果在地址栏输入的是一级菜单则默认打开其第一个二级菜单的页面
            //     } else {
            //         next({
            //             replace: true,
            //             name: 'error-403'
            //         });
            //     }
            // } else { // 没有配置权限的路由, 直接通过
            //     Util.toDefaultPage([...routers], to.name, router, next);
            // }
        }
    }
});

router.afterEach((to) => {
    Util.openNewPage(router.app, to.name, to.params, to.query);
    iView.LoadingBar.finish();
    window.scrollTo(0, 0);
});
