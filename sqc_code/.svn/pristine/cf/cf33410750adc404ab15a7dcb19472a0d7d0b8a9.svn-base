<template>
  <div class="xmqz-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
        <row :gutter="20">
          <i-col span="3">
            <formItem prop="startDate">
              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <formItem prop="endDate">

              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <!-- <i-col span="3">
            <FormItem prop="userName">
              <Input v-model="formItem.userName" placeholder="入库单号"></Input>
            </FormItem>
          </i-col>-->
          <i-col span="3">
            <FormItem prop="Status">
              <Input v-model="formItem.Status" placeholder="审核状态"></Input>
            </FormItem>
          </i-col>
          <i-col span="15">
            <formItem class="btn-box">
              <i-button type="primary" class="btn" @click="searchForm">搜索</i-button>
              <i-button type="warning" class="btn" @click="resetSearch">重置</i-button>
              <i-button type="success" class="btn" @click="addMode" v-show='isshow'>添加</i-button>
              <i-button type="primary" class="btn " @click="xiugai" v-show="isshow" :disabled="showEdit">修改</i-button>
              <i-button type="error" class="btn " @click="shenhe" v-show="shenheisshow" :disabled="showEdit">审核</i-button>
              <i-button type="error" class="btn " @click="QYshenhe" v-show="QYshenheisshow" :disabled="showEdit">区域审核</i-button>
              <i-button type="error" class="btn " @click="shouhuo" v-show="isshow" :disabled="showEdit">收货</i-button>
              <i-button type="info" class="btn " @click="liulan" :disabled="showEdit">浏览</i-button>
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>
    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable" @on-current-change="chooseRow"></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
        <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
      </Select>
      <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
      <i-button class="btn btn-prev" type="ghost" @click="prevPage">上一页</i-button>
      <i-button class="btn btn-next" type="primary" @click="nextPage">下一页</i-button>
      <div class="page-box">
        <p>前往</p>
        <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
        <p>页</p>
      </div>
    </div>
    <!-- 弹窗 -->
    <Modal :mask-closable="false" v-model="modal1" width="1400" :scrollable="true" class="dialog">
      <div slot='header' class="header not-print">
        新增申请单
      </div>
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi' @click="resetForm"></i>
      </div>
      <!-- 用户信息部分 不可修改 -->
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="12">
            <FormItem prop="LocationName" label="库位：">
              <Input v-model="formValidate.LocationName" placeholder="无" :disabled="true"></Input>
            </FormItem>
          </i-col>
          <i-col span="12">
            <FormItem label="总数量：" prop="Num">
              <Input v-model="formValidate.Num" placeholder="无" :disabled="true"></Input>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="12">
            <FormItem label="审核人：" prop="AuditUserName">
              <Input v-model="formValidate.AuditUserName" placeholder="无" :disabled="true"></Input>
            </FormItem>
          </i-col>
          <i-col span="12">
            <FormItem label="状态：" prop="Status">
              <Input v-model="formValidate.Status" placeholder="无" :disabled="true"></Input>
            </FormItem>
          </i-col>
        </row>
        <!-- ** -->
      </Form>
      <!-- 物资列表明细 -->
      <div class="pannel-title">
        <p>物资列表</p>
        <div>
          <i-button type="text" class="Shenqing-font" @click="showSmallModal(0)" size="small">添加物资</i-button>
        </div>
      </div>
      <!-- 添加、修改 -->
      <div class="table-box" style="margin-top:0; margin-bottom:20px;">
        <i-table stripe :columns="choosedItemColumns" :data="choosedItemList" :height="300"></i-table>
      </div>
      <row type="flex" justify="end" style="margin-bottom: 20px; color: #fc5427; font-size: 14px; font-weight: bold;">
      </row>
      <Input v-model="formValidate.Remark" placeholder="备注" type="textarea" :rows="4"></Input>
      <!-- ** -->
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="addForm" :loading="onLoading" :disabled="stopuse">保存</Button>
        <Button class="btn" type="warning" @click="resetForm" :loading="onLoading">取消</Button>
      </div>
    </Modal>
    <!-- 物资弹窗 -->
    <Modal :mask-closable="false" v-model="modal2" width="1200" class="dialog">
      <div slot='header' class="header not-print">
        出库产品
      </div>
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <Input v-model="searchKeyWord" placeholder="请输入项目名称" style="width: 300px; margin: 2px 0 2px 0;" icon="search"></Input>
      <div class="table-box">
        <!-- 物资 -->
        <i-table stripe :columns="materialsColumn" :data="setMaterialtData" @on-selection-change="selectMaterial" :height="500"></i-table>
      </div>
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="smalladdForm" :loading="onLoading">保存</Button>
        <Button class="btn" type="warning" @click="smallResetForm" :loading="onLoading">取消</Button>
      </div>
    </Modal>

    <!-- <Modal :mask-closable="false" v-model="modal3" width="1300" class="dialog">
            <div slot='header' class="header not-print">
                选择供应商
            </div>
            <div slot='close' class="close not-print">
                <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
            </div>
            <Input v-model="searchKeyWord" placeholder="请输入项目名称" style="width: 300px; margin: 2px 0 2px 0;" icon="search"></Input>

            <div class="table-box"> -->
    <!-- 供应商列表 -->
    <!-- <i-table stripe :columns="customsColumn" :data="setCustomsData" @on-selection-change="selectInCustoms" :height="500"></i-table>
            </div>
            <div slot="footer" class="footer not-print">
                <Button class="btn" type="primary" @click="queding" :loading="onLoading">确定</Button>
                <Button class="btn" type="warning" @click="guanbi" :loading="onLoading">关闭</Button>
            </div>
        </Modal> -->

    <Modal :mask-closable="false" v-model="modal4">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <p style="text-align:center;fontWeight:900;fontSize:15px">你确定要审核吗？</p>
      <Input v-model="shenheYJ" type="textarea" :rows="4" placeholder="审核意见" />
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="ok" :loading="onLoading">审核通过</Button>
        <Button class="btn" type="warning" @click="cancel" :loading="onLoading">驳回</Button>
      </div>
    </Modal>
    <!-- 区域经理审核 -->
    <Modal :mask-closable="false" v-model="modal6">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <p style="text-align:center;fontWeight:900;fontSize:15px">区域经理要审核吗？</p>
      <Input v-model="QYshenheYJ" type="textarea" :rows="4" placeholder="审核意见" />
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="QYok" :loading="onLoading">审核通过</Button>
        <Button class="btn" type="warning" @click="QYcancel" :loading="onLoading">驳回</Button>
      </div>
    </Modal>

    <Modal :mask-closable="false" v-model="modal5">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <p style="text-align:center;fontWeight:900;fontSize:15px">你确定收货吗？</p>
      <Input v-model="shouhuoYJ" type="textarea" :rows="4" placeholder="收货意见" />
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="shouhuook" :loading="onLoading">确定收货</Button>
        <Button class="btn" type="warning" @click="shouhuocancel" :loading="onLoading">驳回</Button>
      </div>
    </Modal>
  </div>
</template>
<script>
const Decimal = require("decimal");
import Vue from "vue";
import storejs from "storejs";
import api from "@/api/index.js";
import echartsCommon from "@/api/Common.js";
import btnQX from "@/api/btnQX.js";
import { mapState } from "vuex";
import moment from "moment";
export default {
  data() {
    return {
      //时间回到今天
      options1: echartsCommon.shortcuts(),
      // -----
      QYshenheYJ: "",
      shenheYJ: "",
      shouhuoYJ: "",
      isshow: false,
      shenheisshow: false,
      QYshenheisshow: false,
      kaiguan: true, //判断过期时间或批次有空值
      stopuse: false,
      modeTX: 0, // 1增加 2修改,浏览
      showEdit: true,
      showAdd: false,
      showLook: false,
      modalTitle: "修改",
      Status: null,
      OrderNum: null,
      searchKeyWord: "",
      onLoading: false,
      rowStatus: "",
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0,
        row: 10
      },
      tableHeight: 200,
      tableLoading: false,
      onPrint: false,
      number: true,
      delPoup: false,
      modal1: false,
      modal2: false,
      modal3: false,
      modal4: false,
      modal5: false,
      modal6: false,
      formValidate: {
        LocationName: "",
        Num: "",
        AuditUserName: "",
        Remark: "",
        CreateDate: "",
        Status: ""
      },
      // formValidateRule: {
      //   InType: {
      //     required: true,
      //     message: "入库单类型不得为空",
      //     trigger: "blur"
      //   },
      //   ContractOrder: {
      //     required: true,
      //     message: "关联订单号不得为空",
      //     trigger: "blur"
      //   },
      //   SupNum: {
      //     required: true,
      //     message: "供应商编号不得为空",
      //     trigger: "blur"
      //   },
      //   SupName: {
      //     required: true,
      //     message: "供应商名称不得为空",
      //     trigger: "blur"
      //   },
      //   ContactName: {
      //     required: true,
      //     message: "供应商联系人不得为空",
      //     trigger: "blur"
      //   },
      //   Phone: {
      //     required: true,
      //     message: "供应商联系方式不得为空",
      //     trigger: "blur"
      //   },
      //   OrderTime: {
      //     required: true,
      //     message: "制单时间不得为空",
      //     trigger: "blur"
      //   }
      // },

      formItem: {
        startDate: new Date(),
        endDate: new Date(),
        Status: "",
        OrderNum: ""
      },
      // 主表格行
      columns1: [
        {
          title: "库位",
          key: "LocationName",
          align: "center",
          width: 150
        },
        {
          title: "总数量",
          key: "Num",
          align: "center",
          width: 150
          // render: (h, params) => {
          //   return h(
          //     "div",
          //     {},
          //     params.row.InType ? "生产产品入库" : "采购收货入库"
          //   );
          // }
        },
        {
          title: "审核人",
          key: "AuditUserName",
          align: "center",
          width: 300
        },
        {
          title: "状态",
          key: "Status",
          align: "center",
          width: 200
        },
        {
          title: "收货数量",
          key: "ReceiveNum",
          align: "center",
          width: 150
        },
        {
          title: "创建时间",
          key: "CreateDate",
          align: "center",
          width: 150,
          render: (h, params) => {
            if (!params.row.CreateDate) {
              return h("div", {}, "");
            }
            return h(
              "div",
              {},
              moment(params.row.CreateDate).format("YYYY-MM-DD")
            );
          }
        },
        {
          title: "收货日期",
          key: "ReceiveDate",
          align: "center",
          width: 150,
          render: (h, params) => {
            if (!params.row.ReceiveDate) {
              return h("div", {}, "");
            }
            return h(
              "div",
              {},
              moment(params.row.ReceiveDate).format("YYYY-MM-DD")
            );
          }
        },
        {
          title: "备注",
          key: "ContractOrder",
          align: "center",
          width: 250
        },
        {
          title: " ",
          key: "",
          align: "center"
        }
      ],
      list: [],
      selection: [],
      selectionCustoms: [],
      materialsColumn: [
        //物资列表头
        {
          type: "selection",
          width: 80
        },
        {
          title: "产品编号",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "单位",
          key: "Unit",
          align: "center"
        },
        {
          title: "单价",
          key: "Price",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "描述",
          key: "LocalName",
          align: "center"
        }
      ],
      // customsColumn: [
      //   //供应商表头
      //   {
      //     type: "selection",
      //     width: 80
      //   },
      //   {
      //     title: "供应商编号",
      //     key: "SupNum",
      //     align: "center",
      //     width: 120
      //   },
      //   {
      //     title: "供应商名称",
      //     key: "SupName",
      //     align: "center",
      //     width: 250
      //   },
      //   {
      //     title: "联系方式",
      //     key: "Phone",
      //     align: "center"
      //   },
      //   {
      //     title: "联系人",
      //     key: "ContactName",
      //     align: "center"
      //   },
      //   {
      //     title: "Email",
      //     key: "Email",
      //     align: "center"
      //   },
      //   {
      //     title: "传真",
      //     key: "Fax",
      //     align: "center"
      //   },
      //   {
      //     title: "地址",
      //     key: "Address",
      //     align: "center"
      //   }
      //   // {
      //   //   title: "备注",
      //   //   key: "Remark",
      //   //   align: "center"
      //   // }
      // ],
      materialsData: [],
      materialsData1: [],
      projectListData: [],
      choosedItemColumns: [
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "产品编码",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "单位",
          key: "Unit",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "入库数",
          key: "num",
          align: "center",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("Input-number", {
                props: {
                  placeholder: "填写数量",
                  value: params.row.num,
                  max: 9999999,
                  min: 1
                },
                on: {
                  "on-change": function(e) {
                    that.$nextTick(() => {
                      params.row.num = e;
                      that.choosedItemList[params.index] = params.row;
                    });
                  }
                }
              })
            ]);
          }
        },
        {
          title: "操作",
          key: "action",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-icon-shanchu": true,
                  "icon-btn": true
                },
                style: {},
                on: {
                  click: () => {
                    this.showDelDetailPoup(params.index);
                  }
                }
              })
            ]);
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      choosedItemList: [],
      choosedItemList1: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows,
      authorList: state => state.app.authorList
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    setMaterialtData() {
      // 过滤物资列表
      let that = this;
      let arr = [];
      let idList = [];
      let keyWord = that.searchKeyWord;
      // 选中的商品不会出现在待选列表中
      for (let i of that.choosedItemList) {
        idList.push(i.id);
      }
      for (let i of that.materialsData) {
        if (idList.indexOf(i.ID) <= -1) {
          // 搜索
          if (
            i.ProductName.indexOf(keyWord) > -1 ||
            i.ProductNum.indexOf(keyWord) > -1
          ) {
            arr.push(i);
          }
        }
      }
      return arr;
    },
    // setCustomsData() {
    //   // 过滤供应商列表
    //   let that = this;
    //   let arr = [];
    //   let idList = [];
    //   let keyWord = that.searchKeyWord;
    //   // 选中的商品不会出现在待选列表中
    //   for (let i of that.choosedItemList1) {
    //     idList.push(i.id);
    //   }
    //   for (let i of that.materialsData1) {
    //     if (idList.indexOf(i.ID) <= -1) {
    //       // 搜索
    //       if (
    //         i.SupName.indexOf(keyWord) > -1 ||
    //         i.SupNum.indexOf(keyWord) > -1
    //       ) {
    //         arr.push(i);
    //       }
    //     }
    //   }
    //   return arr;
    // },
    setSmallModalTitle() {
      let that = this;
      return "物资";
    }
  },
  methods: {
    chooseOption(name, value) {
      this.formValidate.InType = value;
    },
    shuangji() {
      let that = this;
      that.searchKeyWord = "";
      that.commit;
      that.$store.commit("changeLoadingPage");
      that.getCustomsList();
      that.modal3 = true;
    },
    queding() {
      let that = this;
      that.modal3 = false;
      let qq = that.selectionCustoms[0];
      that.formValidate.SupNum = qq.SupNum;
      that.formValidate.SupName = qq.SupName;
      that.formValidate.ContactName = qq.ContactName;
      that.formValidate.CreateTime = qq.CreateTime;
      that.formValidate.Address = qq.Address;
      that.formValidate.Phone = qq.Phone;
      // that.formValidate.Remark = qq.Remark;
      that.formValidate.Address = qq.Address;
    },
    guanbi() {
      let that = this;
      that.modal3 = false;
    },
    shenhe() {
      //审核
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal4 = true;
    },
    QYshenhe() {
      //审核
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal6 = true;
    },
    //审核提示框
    ok() {
      let that = this;
      that.Status = 2;
      let data = {
        Id: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.shenheYJ
      };
      api.StoreApplyGoodsAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
          that.shenheYJ = "";
        } else {
          that.$Message.success(response.data);
          that.shenheYJ = "";
        }
        that.modal4 = false;
        that.getList();
      });
    },
    cancel() {
      let that = this;
      that.Status = 3;
      let data = {
        Id: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.shenheYJ
      };
      api.StoreApplyGoodsAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
        } else {
          that.$Message.success(response.data);
        }
        that.modal4 = false;
        that.getList();
      });
    },
    //区域经理审核提示框
    QYok() {
      let that = this;
      that.Status = 6;
      let data = {
        Id: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.QYshenheYJ
      };
      api.AuditByAreaAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
          that.QYshenheYJ = "";
        } else {
          that.$Message.success(response.data);
          that.QYshenheYJ = "";
        }
        that.modal6 = false;
        that.getList();
      });
    },
    QYcancel() {
      let that = this;
      that.Status = 5;
      let data = {
        Id: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.QYshenheYJ
      };
      api.AuditByAreaAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
        } else {
          that.$Message.success(response.data);
        }
        that.modal6 = false;
        that.getList();
      });
    },
    shouhuo() {
      //收货
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal5 = true;
    },
    //收货提示框

    shouhuook() {
      let that = this;
      that.Status = 6;
      let data = {
        Id: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.shouhuoYJ
      };
      api.StoreApplyGoodsConfirm(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
          that.shouhuoYJ = "";
        } else {
          that.$Message.success(response.data);
          that.shouhuoYJ = "";
        }
        that.modal5 = false;
        that.getList();
      });
    },
    shouhuocancel() {
      let that = this;
      that.modal5 = false;
    },
    xiugai() {
      // 修改
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.showLook = true;
      that.stopuse = false;
      that.modal1 = true;
      that.modeTX = 2;
      that.getDetail();
    },
    liulan() {
      // 浏览
      let that = this;
      that.stopuse = true;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal1 = true;
      that.getDetail();
    },
    addMode() {
      // 添加
      let that = this;
      that.modal1 = true;
      that.stopuse = false;
      that.modeTX = 1;
      that.showLook = false;
    },
    chooseRow(row) {
      // 选中某一行修改
      let that = this;
      that.OrderNum = row.Id;
      if (that.OrderNum) {
        that.showEdit = false;
      }
    },
    searchForm() {
      // 搜索表格
      let that = this;
      //判断两个时间段大小
      echartsCommon.message = that.$Message;
      if (
        echartsCommon.ContrastTime(
          that.formItem.startDate,
          that.formItem.endDate,
          that.formItem.startDate2,
          that.formItem.endDate2
        )
      ) {
        that.tablePage.page = 1;
        that.getList();
      }
      //------------------
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    setData(res) {
      let that = this;
      that.formValidate.OrderNum = res.OrderNum;
      that.formValidate.ContractOrder = res.ContractOrder;
      that.formValidate.InType = res.InType;
      that.formValidate.OrderTime = res.OrderTime;
      that.formValidate.ContactName = res.ContactName;
      that.formValidate.Address = res.Address;
      that.formValidate.Phone = res.Phone;
      that.formValidate.SupNum = res.SupNum;
      that.formValidate.SupName = res.SupName;
    },
    showDelDetailPoup(index) {
      let that = this;
      that.choosedItemList.splice(index, 1);
    },
    resetForm() {
      let that = this;
      that.choosedItemList = [];
      that.formValidate.Remark = "";
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    getDetail() {
      // 获取出库商品明细
      let that = this;
      let data = {
        StoreId: that.userMes.StoreID,
        Id: that.OrderNum
      };
      that.$store.commit("changeLoadingPage");
      api.StoreApplyGoodsOne(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          // 设置数据
          that.setDetail(response.data);
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    setDetail(res) {
      let that = this;
      that.choosedItemList = [];
      that.setData(res);
      let Status = res.Status;
      Status = echartsCommon.applysStatus(Status);
      that.formValidate.LocationName = res.LocationName;
      that.formValidate.AuditUserName = res.AuditUserName;
      that.formValidate.Num = res.Num;
      that.formValidate.Status = Status;
      that.formValidate.Remark = res.Remark;
      for (let i in res.StoreApplyGoodsDetailsDtoList) {
        let dom = res.StoreApplyGoodsDetailsDtoList[i];
        let a = {
          ProductName: dom.ProductName,
          ProductNum: dom.ProductNum,
          GoodsId: dom.ProductNum,
          Unit: dom.Unit,
          Standard: dom.Standard,
          num: dom.Num
        };
        that.choosedItemList.push(a);
      }
      that.modal1 = true;
    },
    setUploadData() {
      // 设置提交数据
      let that = this;
      var data = {
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Remark: that.formValidate.Remark,
        StoreApplyGoodsDetails: []
      };
      // 添加物资记录
      for (var i of this.choosedItemList) {
        var a = {
          GoodsId: i.ProductNum,
          Num: i.num
        };
        data.StoreApplyGoodsDetails.push(a);
      }
      return data;
    },
    setUploadData1() {
      // 设置提交数据
      let that = this;
      let data = {
        EmployeeId: that.userMes.EmployeeID,
        Id: that.OrderNum,
        StoreId: that.userMes.StoreID,
        Remark: that.formValidate.Remark,
        StoreApplyGoodsDetails: []
      };
      // 添加物资记录
      for (let i of that.choosedItemList) {
        // data.ConsumptionTotal += i.sum;
        let a = {
          GoodsId: i.ProductNum,
          Num: i.num
        };
        data.StoreApplyGoodsDetails.push(a);
      }
      return data;
    },
    addForm() {
      let that = this;
      if (that.choosedItemList.length <= 0) {
        that.$Message.error("请选择入库商品");
        return false;
      }
      that.$refs.formValidate1.validate(validate => {
        if (validate) {
          if (that.choosedItemList.length <= 0) {
            that.$Message.error("请选择入库商品");
            return false;
          }
          that.onLoading = true;
          if (that.modeTX == 1) {
            //点击添加时的保存按钮;
            api.StoreApplyGoodsAdd(that.setUploadData()).then(response => {
              that.onLoading = false;
              if (response.error_code === "Success") {
                that.$Message.success("提交成功");
                that.resetForm();
                that.getList();
              } else {
                that.$Message.error(response.error_message);
              }
            });
          }
          if (that.modeTX == 2) {
            //点击修改时的保存按钮
            api.StoreApplyGoodsEdit(that.setUploadData1()).then(response => {
              that.onLoading = false;
              if (response.error_code === "Success") {
                that.$Message.success("修改成功");
                that.resetForm();
                that.getList();
              } else {
                that.$Message.error(response.error_message);
              }
            });
          }
        } else {
          that.$Message.error("请选择商品");
        }
      });
    },
    // 选择物资
    selectMaterial(selection) {
      // 选中的物资列表
      let that = this;
      that.selection = selection;
    },
    // selectInCustoms(selection) {
    //   // 选中的供应商列表
    //   let that = this;
    //   that.selectionCustoms = selection;
    // },
    smalladdForm() {
      let that = this;
      // 选择物资
      for (let i in that.selection) {
        let a = {
          ProductNum: that.selection[i].ProductNum,
          Unit: that.selection[i].Unit,
          Standard: that.selection[i].Standard,
          num: 1,
          ProductName: that.selection[i].ProductName,
          GoodsId: that.selection[i].BarCode,
          Num: that.selection[i].Num
        };

        that.choosedItemList.push(a);
      }
      that.modal2 = false;
      that.modal3 = false;
    },
    smallResetForm() {
      let that = this;
      that.modal2 = false;
      that.modal3 = false;
    },
    showSmallModal() {
      // 展示物资弹窗
      let that = this;
      that.searchKeyWord = "";
      that.commit;
      that.$store.commit("changeLoadingPage");
      that.getSalesGoodsList();
      that.modal2 = true;
    },
    showRemark(row) {
      // 显示备注
      let that = this;
      that.$Modal.info({
        title: "备注详情",
        content: row.Remark
      });
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      let data = {
        StoreId: that.userMes.StoreID,
        employeeId: that.userMes.EmployeeID,
        StartDate: that.formItem.startDate,
        EndDate: that.formItem.endDate,
        Status: that.formItem.Status,
        pageindex: that.tablePage.page,
        pagesize: that.tablePage.pageNum
      };
      // 转换日期
      if (data.StartDate) {
        data.StartDate = moment(data.StartDate).format("YYYY-MM-DD");
      }
      if (data.EndDate) {
        data.EndDate = moment(data.EndDate).format("YYYY-MM-DD");
      }
      that.tableLoading = true;
      api.StoreApplyGoods(data).then(response => {
        if (response.error_code === "Success") {
          let status = response.data.list;
          for (let i = 0; i < status.length; i++) {
            status[i].Status = echartsCommon.applysStatus(status[i].Status);
          }
          let res = response.data;
          that.list = res.list;
          that.tableLoading = false;
          that.$set(that.tablePage, "page", res.page);
          that.$set(that.tablePage, "pageNum", res.size);
          that.$set(that.tablePage, "allNum", res.total);
          that.$set(that.tablePage, "maxPageNum", res.totalPage);
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    //导出
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getSalesGoodsList() {
      // 获取出库产品列表
      let that = this;
      let data = {
        employeeId: that.userMes.EmployeeID,
        productName: that.searchKeyWord
      };
      api.selectInProduct(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          that.materialsData = response.data;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    // getCustomsList() {
    //   // 获取供应商列表
    //   let that = this;
    //   let data = {
    //     employeeId: that.userMes.EmployeeID,
    //     productName: that.searchKeyWord
    //   };
    //   api.selectInCustoms(data).then(response => {
    //     that.$store.commit("changeLoadingPage");
    //     if (response.error_code === "Success") {
    //       that.materialsData1 = response.data;
    //     } else {
    //       that.$Message.error(response.error_message);
    //     }
    //   });
    // },
    getSalesProjectList() {
      let that = this;
      let data = {
        page: 1,
        size: 1000
      };
      api.getItemsByValid(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          that.projectListData = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
      that.isshow = btnQX.apiUrlList("Shenqing_add");
      that.shenheisshow = btnQX.apiUrlList("Shenqing_shenhe");
      that.QYshenheisshow = btnQX.apiUrlList("QYShenqing_shenhe");
    });
  }
};
</script>
<style>
.pannel-title i:hover {
  cursor: pointer;
  color: #94bb6d;
}

.ivu-select-dropdown {
  z-index: 99999;
}

.buttongroup {
  margin-left: 323px;
  margin-top: -33px;
}
.Shenqing-font {
  font-size: 20px;
  font-weight: 900;
}
</style>