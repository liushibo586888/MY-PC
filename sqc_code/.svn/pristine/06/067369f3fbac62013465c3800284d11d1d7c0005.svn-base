<template>
    <div class="zwgl-container container">
        <div class="search-box">
            <Form :model="formItem" :label-width="0" inline @submit.native.prevent class="search-form" ref="searchForm">
                <row :gutter="20">
                    <!-- 仪器名称 -->
                     <i-col span="3">
                        <FormItem prop="Name">
                            <Input v-model="formItem.Name" placeholder="支付方式名称"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="3">
                        <FormItem prop="Valid">
                            <Select v-model="formItem.Valid" placeholder="是否有效">
                                <Option :value="-1">全部</Option>
                                <Option :value="1">有效</Option>
                                <Option :value="0">无效</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                    <i-col span="18">
                        <formItem class="btn-box">
                            <Button type="primary" class="btn" @click="searchList">搜索</Button>
                            <Button type="warning" class="btn" @click="resetSearch">重置</Button>
                            <i-button type="primary" class="btn btn-add" @click="showAddPoup" v-if="showAdd">添加</i-button>
                            <i-button type="primary" class="btn btn-purple"  @click="getDetail" v-if="showEdit" :disabled="!rowID">修改</i-button>
                        </formItem>
                    </i-col>
                </row>
            </Form>
        </div>
        <div class="table-box" id="tableBox">
            <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
            <Table :columns="columns1" :data="list" :height="setTableHeight" ref="mainTable" highlight-row @on-current-change="getRowID"></Table>
        </div>
        <!-- 新增弹窗 -->
        <Modal :mask-closable="false" width='600'  v-model="modal1" class="dialog" class-name="vertical-center-modal" v-if="showAdd || showEdit">
            <div slot='header' class="header">
                {{modalTitle}}
            </div>
            <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form" >
                <row type="flex" justify="space-between">
                    <i-col span="24">
                        <FormItem prop="Name" label="支付方式名称：" :rules="formValidateRule.Name">
                            <Input v-model="formValidate.Name" placeholder="请输入" />
                        </FormItem>
                    </i-col>
                    </row>
                   <row>
                    <i-col span="24">
                        <FormItem prop="SimpleCode" label="支付简码：" :rules="formValidateRule.SimpleCode" >
                      
                              <Input v-model="formValidate.SimpleCode" placeholder="请输入" />

                        </FormItem>
                    </i-col>
                </row>
                <row>
                    <i-col span="24">
                        <FormItem prop="IsStaging" label="是否分期：" >
                            <Select v-model="formValidate.IsStaging" placeholder="请选择" @on-change="llll">
                                <Option :value="1">是</Option>
                                <Option :value="0">否</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                </row>
         
            <!-- 收费表格 添加用 -->

            <div class="table-box" v-if="fenqi">
                <!-- <Table  :columns="chargeTableHead" :data="chargeTableData"></Table > -->

                <i-table stripe :columns="TableHead" :data="TableData"></i-table>


            </div>
                <row>
                    <i-col span="24">
                        <FormItem prop="SupportCertain" label="是否支持开单：" >
                            <Select v-model="formValidate.SupportCertain" placeholder="请选择">
                                <Option :value="1">是</Option>
                                <Option :value="0">否</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                </row>
                <row>
                    <i-col span="24">
                        <FormItem prop="PayModeType" label="支付类型：" >
                            <Select v-model="formValidate.PayModeType" placeholder="请选择支付类型">
                                <Option :value="0">真实金额类型</Option>
                                <Option :value="1">真实加虚拟金额类型</Option>
                                <Option :value="2">虚拟金额类型</Option>
                                <Option :value="3">时间卡类型</Option>
                                <Option :value="4">欠款类型</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                </row>
                <row>
                    <i-col span="24">
                        <FormItem prop="AccountType" label="账户类型：" >
                            <Select v-model="formValidate.AccountType" placeholder="请选择账户类型">
                                <Option :value="0">预交金帐户</Option>
                                <Option :value="1">积分帐户</Option>
                                <Option :value="2">卡帐户</Option>
                                <Option :value="3">非帐户类型</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                </row>
                <row>
                    <i-col span="24">
                        <FormItem prop="Valid" label="是否有效：" >
                            <Select v-model="formValidate.Valid" placeholder="请选择">
                                <Option :value="1">是</Option>
                                <Option :value="0">否</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                </row>
                <row>
                    <i-col span="24">
                        <FormItem prop="Remark" label="备注">
                            <Input v-model="formValidate.Remark" placeholder="请输入" type="textarea" :row="4"/>
                        </FormItem>
                    </i-col>
                </row>
            </Form>
            <div slot="footer" class="footer">
                <Button type="primary" class="btn" @click="addForm" :loading="loading">保存</Button>
                <Button type="warning" class="btn" @click="resetForm" :loading="loading">取消</Button>
            </div>
        </Modal>
        
    </div>
</template>
<script>
const Decimal = require("decimal");
import manager from "@/api/manager.js";
import api from "@/api/index.js";
import { mapState } from "vuex";
export default {
  data() {
    return {
      fenqi: false,
      tableLoading: false,
      showAdd: true,
      showEdit: true,
      rowID: null,
      tableHeight: 200,
      loading: false,
      modalTitle: "新增",
      phone: "",
      modal1: false,
      // 添加弹窗用
      formValidate: {
        Name: "",
        Valid: 1,
        IsStaging: 0,
        SupportCertain: 1
      },
      formValidateRule: {
        Name: {
          required: true,
          message: "支付名称不得为空",
          trigger: "blur"
        },
        SimpleCode: {
          required: true,
          message: "简码不得为空",
          trigger: "blur"
        },
        Valid: {
          required: true,
          message: "是否有效不得为空",
          trigger: "blur",
          type: "number"
        },
        IsStaging: {
          required: true,
          message: "请选择是否分期",
          trigger: "blur"
        },
        SupportCertain: {
          required: true,
          message: "请选择是否支持开单",
          trigger: "blur"
        },
        PayModeType: {
          required: true,
          message: "请选择支付类型",
          trigger: "blur"
        },
        AccountType: {
          required: true,
          message: "请选择账户类型",
          trigger: "blur"
        },
        AccountType: {
          required: true,
          message: "请选择账户类型",
          trigger: "blur"
        },
        PayModeType: {
          required: true,
          message: "请选择支付方式类型",
          trigger: "blur"
        }
      },
      formItem: {
        Name: "",
        Valid: "",
        IsStaging: ""
      },

      // 支付方式列表
      TableHead: [
        {
          title: "序号",
          type: "index",
          align: "center"
        },
        {
          title: "分期方式",
          align: "center",
          key: "InterestName",
          render: (h, params) => {
            let that = this;

            return h("div", [
              // that.TableData.map(function(type) {
              h("Input", {
                props: {
                  placeholder: "分期方式",
                  value: that.TableData[params.index].InterestName
                }
              })
              // })
            ]);
          }
        },
        {
          title: "利息率",
          align: "center",
          key: "InterestRate",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("Input", {
                props: {
                  placeholder: "利息率",
                  value: that.TableData[params.index].InterestRate
                  // max: 99999999999,
                  // min: 1
                },
                on: {
                  "on-change": e => {
                    params.row.Amount = e;
                    that.TableData[params.index] = params.row;
                  }
                }
              })
            ]);
          }
        },
        {
          title: "封顶贴息费",
          align: "center",
          key: "MaxHandlingFee ",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("Input", {
                props: {
                  placeholder: "封顶贴息费",
                  value: that.TableData[params.index].MaxHandlingFee
                  // max: 99999999999,
                  // min: 1
                },
                on: {
                  "on-change": e => {
                    params.row.Amount = e;
                    that.TableData[params.index] = params.row;
                  }
                }
              })
            ]);
          }
        },
        {
          title: "操作",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-tianjia": true,
                  "icon-btn": true
                },
                on: {
                  click: () => {
                    this.addCharge(params.index);
                  }
                },
                style: {
                  marginRight: "20px"
                }
              }),
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-icon-shanchu": true,
                  "icon-btn": true
                },
                on: {
                  click: () => {
                    this.delCharge(params.index);
                  }
                },
                style: {
                  marginRight: "5px"
                }
              })
            ]);
          }
        }
      ],

      TableData: [],
      volumeTypes: [],
      HandleList: [],
      // 我的支付方式 保存文字
      myPaymentMode: [],

      columns1: [
        {
          title: "支付方式名称",
          key: "PayModeName",
          align: "center"
        },
        {
          title: "名称简码",
          key: "SimpleCode",
          align: "center"
        },
        {
          title: "是否有效",
          key: "Valid",
          align: "center",
          render: (h, params) => {
            let text = params.row.Valid ? "是" : "否";
            return h("div", {}, text);
          }
        },
        {
          title: "是否支持开单",
          key: "SupportCertain",
          align: "center",
          render: (h, params) => {
            let text = params.row.SupportCertain ? "是" : "否";
            return h("div", {}, text);
          }
        },
        {
          title: "是否分期",
          key: "IsStaging",
          align: "center",
          render: (h, params) => {
            let text = params.row.IsStaging ? "是" : "否";
            return h("div", {}, text);
          }
        },
        {
          title: "备注",
          key: "Remark",
          align: "center"
        },
        {
          title: " ",
          width: 10
        }
      ],
      list: []
    };
  },
  computed: {
    ...mapState({
      authorList: state => state.app.authorList,
      tableRows: state => state.app.tableRows,
      authorList: state => state.app.authorList
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    getDate() {
      let date = new Date();
      return `${date.getFullYear()}/${date.getMonth() +
        1} ${date.getDate()}  ${date.toLocaleTimeString()}`;
    }
  },

  methods: {
    llll(value) {
      let that = this;
      if (value == 1) {
        that.fenqi = true;
        // that.TableData=[]
      } else {
        that.fenqi = false;
      }
    },
    addCharge() {
      // 添加收款方式
      let that = this;
      let a = {
        PayModeID: "",
        Amount: 10
      };
      let sum = 0;
      // // 计算总金额
      for (let i in that.TableData) {
        sum += that.TableData[i].Amount;
      }
      // // a.Amount = that.ConsumptionTotal - sum
      // let allAmount = new Decimal(that.ConsumptionTotal);
      // a.Amount = allAmount.sub(sum).toNumber();
      // if (a.Amount < 0) {
      //   a.Amount = 0;
      // }
      that.TableData.push(a);
    },
    delCharge(index) {
      // 删除收款方式
      let that = this;
      if (that.TableData.length > 1) {
        that.TableData.splice(index, 1);
      }
    },

    getRowID(row) {
      let that = this;
      that.rowID = row.ID;
    },
    showAddPoup() {
      let that = this;
      that.resetForm();
      that.modal1 = true;
      that.modalTitle = "新建";
    },
    setAuthor() {
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "修改") {
            that.showEdit = i.IsVisible;
          }
          if (i.Name === "增加") {
            that.showAdd = i.IsVisible;
          }
        }
      }
    },
    searchList() {
      let that = this;
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    searchCustomerTel() {
      let that = this;
      that.$refs.searchTelForm.validate(validate => {
        if (validate) {
          // 搜索...
          that.$refs.searchTelForm.resetFields();
          that.poupSearchTel = false;
          that.modal1 = true;
          that.modalTitle = "新增";
        } else {
          that.$Message.error("请输入用户的联系电话");
        }
      });
    },
    modefyMessage(data) {
      let that = this;
      that.loading = true;
      // console.log(data)
      api.editPayMode(that.formValidate.ID, data).then(response => {
        that.loading = false;
        if (response.error_code === "Success") {
          that.$Message.success("修改成功");
          that.getList();
          that.resetForm();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },

    getDetail(row) {
      // 获取用户信息
      let that = this;
      // 获取支付方式
      // api.getAllPayModelInfoSupportCertain().then(response => {
      // console.log(response.data.list);
      // let res = response.data;
      // that.TableData =[];
      // console.log(that.TableData);
      // });

      if (!that.rowID) {
        that.$Message.error("请选择一条记录");
        return false;
      }
      that.$store.commit("changeLoadingPage");
      api.getSingleChannels(that.rowID).then(response => {
        that.TableData = response.data.StagingDetails;
        console.log(response.data.StagingDetails);
        if (response.error_code === "Success") {
          that.formValidate = response.data;
          that.$set(that.formValidate, "id", response.data.ID);
          that.$set(that.formValidate, "Valid", response.data.Valid ? 1 : 0);
          that.$set(
            that.formValidate,
            "IsSupportCertain",
            response.data.IsSupportCertain ? 1 : 0
          );
          that.$set(
            that.formValidate,
            "AccountType",
            response.data.AccountType ? 1 : 0
          );
          that.$set(
            that.formValidate,
            "PayModeType",
            response.data.PayModeType ? 1 : 0
          );
          that.$set(
            that.formValidate,
            "SupportCertain",
            response.data.SupportCertain ? 1 : 0
          );
          that.$set(
            that.formValidate,
            "IsStaging",
            response.data.IsStaging ? 1 : 0
          );
          that.$set(that.formValidate, "Remark", response.data.Remark);
          setTimeout(() => {
            that.$store.commit("changeLoadingPage");
            that.modalTitle = "修改";
            that.modal1 = true;
          }, 800);
        } else {
          that.$store.commit("changeLoadingPage");
          that.$Message.error(response.error_message);
        }
        // console.log(response.data.IsStaging);
        if (response.data.IsStaging == 0) {
          that.fenqi = false;
        } else {
          that.fenqi = true;
        }
      });
    },
    resetForm() {
      let that = this;
      that.formValidate.ID = "";
      that.$refs.formValidate1.resetFields();
      that.loading = false;
      that.modal1 = false;
      that.TableData = [];
    },
    addForm() {
      let that = this;
      for (let i in that.TableData) {
        let data = that.TableData[i];
        // 判断支付方式
        if (!data.PayModeID) {
          that.$Message.error("支付方式不得为空");
          return false;
        }
      }
      that.$refs.formValidate1.validate(validate => {
        if (validate) {
          let data = {
            ID: that.formValidate.ID,
            Name: that.formValidate.Name,
            Valid: that.formValidate.Valid === 1 ? true : false,
            Remark: that.formValidate.Remark,
            SupportCertain:
            that.formValidate.SupportCertain === 1 ? true : false,
            PaymodeTypeID: that.formValidate.PaymodeTypeID,
            AccountTypeID: that.formValidate.AccountTypeID,
            SimpleCode: that.formValidate.SimpleCode,
            IsStaging: that.formValidate.IsStaging === 1 ? true : false
          };
          //  console.log(data.IsStaging);
          if (that.modalTitle === "修改") {
            that.modefyMessage(data);
            return false;
          }
          that.loading = true;
          api.addPayMode(data).then(response => {
            that.loading = false;
            if (response.error_code === "Success") {
              that.$Message.success("添加成功");
              that.getList();
              that.resetForm();
            } else {
              that.$Message.error(response.error_message);
            }
          });
        } else {
          that.$Message.error("有必填项为空");
        }
      });
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    getList() {
      let that = this;
      that.tableLoading = true;
      let data = {
        Name: that.formItem.Name,
        Valid: ""
      };
      if (that.formItem.Valid === 1) {
        data.Valid = true;
      } else if (that.formItem.Valid === 0) {
        data.Valid = false;
      }
      api.getPayModeList(data).then(response => {
        that.tableLoading = false;
        if (response.error_code === "Success") {
          let res = response.data;
          // console.log(response.data);
          that.list = res.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    }
  },

  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.setAuthor();
      that.initTableHeight();
      that.getList();
      // that.getZffsList();
    });
  }
};
</script>
<style>
.ivu-table1 {
  margin-top: -40px;
  margin-bottom: 5px;
}
</style>
