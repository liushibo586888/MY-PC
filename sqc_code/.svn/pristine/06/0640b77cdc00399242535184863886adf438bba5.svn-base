<template>
  <div class="xmqz-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
        <row :gutter="20">
          <i-col span="3">
            <formItem prop="startDate">
              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <formItem prop="endDate">

              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <!-- <i-col span="3">
                        <FormItem prop="userName">
                            <Input v-model="formItem.userName" placeholder="入库单号"></Input>
                        </FormItem>
                    </i-col> -->
          <!-- <i-col span="3">
                        <FormItem prop="Status">
                            <Input v-model="formItem.Status" placeholder="审核状态"></Input>
                        </FormItem>
                    </i-col> -->
          <i-col span="18">
            <formItem class="btn-box">
              <i-button type="primary" class="btn" @click="searchForm">搜索</i-button>
              <i-button type="warning" class="btn" @click="resetSearch">重置</i-button>
              <i-button type="success" class="btn" @click="addMode">添加</i-button>
              <i-button type="primary" class="btn " @click="xiugai" :disabled="showEdit">修改</i-button>
              <i-button type="error" class="btn " @click="shenhe" v-show="shenheisshow" :disabled="showEdit">审核</i-button>
              <i-button type="error" class="btn " @click="fuhe" v-show="isshow" :disabled="showEdit">复核</i-button>
              <i-button type="info" class="btn " @click="liulan" :disabled="showEdit">浏览</i-button>
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>
    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable" @on-current-change="chooseRow"></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
        <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
      </Select>
      <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
      <i-button class="btn btn-prev" type="ghost" @click="prevPage">上一页</i-button>
      <i-button class="btn btn-next" type="primary" @click="nextPage">下一页</i-button>
      <div class="page-box">
        <p>前往</p>
        <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
        <p>页</p>
      </div>
    </div>
    <!-- 弹窗 -->
    <Modal :mask-closable="false" v-model="modal1" width="1000" :scrollable="true" class="dialog">
      <div slot='header' class="header not-print">
        盘点物资
      </div>
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi' @click="resetForm"></i>
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="12">
            <FormItem prop="ContractOrder" label="关联单号:">
              <Input v-model="formValidate.ContractOrder" placeholder="无"></Input>
            </FormItem>
          </i-col>
          <i-col span="12">
            <FormItem prop="CreateTime" label="制单时间:">
              <DatePicker style="width:100%" class="DatePicker_time" type="date" :options="options1" placeholder="制单时间" v-model="formValidate.CreateTime" :clearable="false" :editable="false"></DatePicker>
            </FormItem>
          </i-col>
        </row>
      </Form>
      <!-- 物资列表明细 -->
      <div class="pannel-title">
        <p>盘点物资列表</p>
        <div>
          <i-button type="text" class="Shenqing-font" @click="showSmallModal(0)" size="small">添加物资</i-button>
        </div>
      </div>
      <!-- 添加、修改 -->
      <div class="table-box" style="margin-top:0; margin-bottom:20px;">
        <i-table stripe :columns="choosedItemColumns" :data="choosedItemList" :height="300"></i-table>
      </div>
      <row type="flex" justify="end" style="margin-bottom: 20px; color: #fc5427; font-size: 14px; font-weight: bold;">
      </row>
      <Input v-model="formValidate.Remark" placeholder="备注" type="textarea" :rows="4"></Input>
      <!-- ** -->
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="addForm" :loading="onLoading" :disabled="stopuse">保存</Button>
        <Button class="btn" type="warning" @click="resetForm" :loading="onLoading">取消</Button>
      </div>
    </Modal>
    <!-- 物资弹窗 -->
    <Modal :mask-closable="false" v-model="modal2" width="1200" class="dialog">
      <div slot='header' class="header not-print">
        盘点物资
      </div>
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <Input v-model="searchKeyWord" placeholder="物资编号/名称" style="width: 300px; margin: 2px 0 2px 0;" icon="search"></Input>
      <div class="table-box">
        <!-- 物资 -->
        <i-table stripe :columns="materialsColumn" :data="setMaterialtData" @on-selection-change="selectMaterial" :height="500"></i-table>
      </div>
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="smalladdForm" :loading="onLoading">保存</Button>
        <Button class="btn" type="warning" @click="smallResetForm" :loading="onLoading">取消</Button>
      </div>
    </Modal>

    <Modal :mask-closable="false" v-model="modal4">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <p style="text-align:center;fontWeight:900;fontSize:15px">你确定要审核吗？</p>
      <Input v-model="shenheYJ" type="textarea" :rows="4" placeholder="审核意见" />
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="ok" :loading="onLoading">审核通过</Button>
        <Button class="btn" type="warning" @click="cancel" :loading="onLoading">驳回</Button>
      </div>
    </Modal>
    <!-- 复核弹窗 -->
    <Modal :mask-closable="false" v-model="modal5" width="1000" :scrollable="true" class="dialog">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="ContractOrder" label="关联单号:">
              <Input v-model="formValidate.ContractOrder" placeholder="无"></Input>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="CreateTime" label="制单时间:">
              <DatePicker style="width:100%" class="DatePicker_time" type="date" :options="options1" placeholder="制单时间" v-model="formValidate.CreateTime" :clearable="false" :editable="false"></DatePicker>
            </FormItem>
          </i-col>
          <i-col span="1"></i-col>
        </row>
      </Form>
      <div class="table-box" style="margin-top:0; margin-bottom:20px;">
        <i-table stripe :columns="choosedItemColumnsFH" :data="choosedItemListFH" :height="300"></i-table>
      </div>

      <div class="bottom-box" style="float:right; margin:-15px 0 10px 0">
        <i-button class="btn btn-prev" type="ghost" @click="prevPage">上一页</i-button>
        <i-button class="btn btn-next" type="primary" @click="nextPage">下一页</i-button>
      </div>

      <row type="flex" justify="end" style="margin-bottom: 20px; color: #fc5427; font-size: 14px; font-weight: bold;">
      </row>
      <Input v-model="formValidate.Remark" placeholder="备注" type="textarea" :rows="4"></Input>
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="fuheok" :loading="onLoading" :disabled='this.IsComplete == 0 ? true : false'>确定</Button>
        <Button class="btn" type="warning" @click="fuhecancel" :loading="onLoading">取消</Button>
      </div>
    </Modal>
    <!-- 浏览弹窗 -->
    <Modal :mask-closable="false" v-model="modal6" width="1000" :scrollable="true" class="dialog">
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="ContractOrder" label="关联单号:">
              <Input v-model="formValidate.ContractOrder" placeholder="无"></Input>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="CreateTime" label="制单时间:">
              <DatePicker style="width:100%" class="DatePicker_time" type="date" :options="options1" placeholder="制单时间" v-model="formValidate.CreateTime" :clearable="false" :editable="false"></DatePicker>
            </FormItem>
          </i-col>
          <i-col span="1"></i-col>
        </row>
      </Form>
      <div class="table-box" style="margin-top:0; margin-bottom:20px;">
        <i-table stripe :columns="choosedItemColumnsLuLan" :data="choosedItemListFH" :height="300"></i-table>
      </div>

      <div class="bottom-box" style="float:right; margin:-15px 0 10px 0">
        <i-button class="btn btn-prev" type="ghost" @click="prevPage">上一页</i-button>
        <i-button class="btn btn-next" type="primary" @click="nextPage">下一页</i-button>
      </div>

      <row type="flex" justify="end" style="margin-bottom: 20px; color: #fc5427; font-size: 14px; font-weight: bold;">
      </row>
      <Input v-model="formValidate.Remark" placeholder="备注" type="textarea" :rows="4"></Input>
      <div slot="footer" class="footer not-print">
        <Button class="btn" type="primary" @click="fuheok" :loading="onLoading" :disabled='true'>确定</Button>
        <Button class="btn" type="warning" @click="fuhecancel" :loading="onLoading" :disabled='true'>取消</Button>
      </div>
    </Modal>
  </div>
</template>
<script>
const Decimal = require("decimal");
import Vue from "vue";
import storejs from "storejs";
import api from "@/api/index.js";
import echartsCommon from "@/api/Common.js";
import btnQX from "@/api/btnQX.js";
import { mapState } from "vuex";
import moment from "moment";
export default {
  data() {
    return {
      //时间回到今天
      options1: echartsCommon.shortcuts(),
      // -----
      FH: 0,
      FHNum: 0,
      FHFY: 0, //0主分页  1复核分页
      FHdisable: false,
      IsComplete: 0,
      isshow: false,
      shenheYJ: "",
      shenheisshow: false,
      kaiguan: true, //判断过期时间或批次有空值
      stopuse: false,
      modeTX: 0, // 1增加 2修改,浏览
      showEdit: true,
      showAdd: false,
      showLook: false,
      modalTitle: "修改",
      Status: null,
      OrderNum: null,
      searchKeyWord: "",
      onLoading: false,
      rowStatus: "",
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0,
        row: 10
      },
      tablePageFH: {
        //复核分页
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0,
        row: 10
      },
      tableHeight: 200,
      tableLoading: false,
      onPrint: false,
      number: true,
      delPoup: false,
      modal1: false,
      modal2: false,
      modal4: false,
      modal5: false,
      modal6: false,
      formValidate: {
        ContractOrder: "",
        CreateTime: new Date(),
        Remark: ""
      },
      formItem: {
        startDate: new Date(),
        endDate: new Date(),
        Status: "",
        OrderNum: ""
      },
      // 主表格行
      columns1: [
        {
          title: "盘点单号",
          key: "OrderNum",
          align: "center",
          width: 250
        },
        {
          title: "关联单号",
          key: "ContractOrder",
          align: "center"
        },
        {
          title: "审核状态",
          key: "Status",
          align: "center",
          render: (h, params) => {
            return h("div", {}, params.row.Status == 1 ? "待审核" : "审核完毕");
          }
        },
        // {
        //   title: "复核状态",
        //   key: "Status",
        //   align: "center",
        //   render: (h, params) => {
        //     return h("div", {}, params.row.Status == 0 ? "复核完毕" : "未复核");
        //   }
        // },
        {
          title: "制单人",
          key: "CreateUser",
          align: "center"
        },
        {
          title: "创建时间",
          key: "CreateTime",
          align: "center",
          render: (h, params) => {
            if (!params.row.CreateTime) {
              return h("div", {}, "");
            }
            return h(
              "div",
              {},
              moment(params.row.CreateTime).format("YYYY-MM-DD")
            );
          }
        },
        {
          title: "备注",
          key: "ContractOrder",
          align: "center",
          width: 250
        },
        {
          title: " ",
          key: "",
          align: "center"
        }
      ],
      list: [],
      selection: [],
      selectionCustoms: [],
      materialsColumn: [
        //物资列表头
        {
          type: "selection",
          width: 80
        },
        {
          title: "产品编号",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "单位",
          key: "Unit",
          align: "center"
        },
        {
          title: "单价",
          key: "Price",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "描述",
          key: "LocalName",
          align: "center"
        }
      ],
      materialsData: [],
      materialsData1: [],
      projectListData: [],
      choosedItemColumns: [
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "产品编码",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "类别",
          key: "CategoryName",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "操作",
          key: "action",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-icon-shanchu": true,
                  "icon-btn": true
                },
                on: {
                  click: () => {
                    this.showDelDetailPoup(params.index);
                  }
                }
              })
            ]);
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      choosedItemList: [],
      choosedItemColumnsFH: [
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "产品编码",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "类别",
          key: "CategoryName",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "库存数",
          key: "LocalQty",
          align: "center",
          render: (h, params) => {
            return h(
              "div",
              {},
              this.IsComplete == 0 ? params.row.LocalQty : "X"
            );
          }
        },
        {
          title: "盘点数",
          key: "num",
          align: "center",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("Input-number", {
                props: {
                  placeholder: "填写数量",
                  value: params.row.num,
                  max: 9999999,
                  min: 0
                },
                on: {
                  "on-change": function(e) {
                    that.$nextTick(() => {
                      params.row.num = e;
                      that.FHNum = e;
                      that.choosedItemListFH[params.index] = params.row;
                    });
                  }
                }
              }),
              h(
                "Button",
                {
                  props: {
                    disabled: this.IsComplete == 0 ? true : false,
                    type: "info"
                  },
                  style: {
                    position: "absolute",
                    width: "50px"
                  },
                  on: {
                    click: () => {
                      this.ButtonQD(params.row.ID);
                    }
                  }
                },
                "确定"
              )
            ]);
          }
        },
        {
          title: "盘差数",
          key: "DifQty",
          align: "center",
          render: (h, params) => {
            return h("div", {}, this.IsComplete == 0 ? params.row.DifQty : "X");
          }
        },
        {
          title: "操作",
          key: "action",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-icon-shanchu": true,
                  "icon-btn": true
                },
                // style: {
                //   display: this.FHdisable ? "none" : "block"
                // },
                style: {
                  display: this.IsComplete == 0 ? "none" : "block"
                },
                on: {
                  click: () => {
                    this.showDelDetailPoup(params.index);
                    this.deleteFH(params.row.ID);
                  }
                }
              })
            ]);
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      choosedItemColumnsLuLan: [
        {
          title: "产品名称",
          key: "ProductName",
          align: "center"
        },
        {
          title: "产品编码",
          key: "ProductNum",
          align: "center"
        },
        {
          title: "类别",
          key: "CategoryName",
          align: "center"
        },
        {
          title: "规格",
          key: "Standard",
          align: "center"
        },
        {
          title: "库存数",
          key: "LocalQty",
          align: "center",
          render: (h, params) => {
            return h(
              "div",
              {},
              this.IsComplete == 0 ? params.row.LocalQty : "X"
            );
          }
        },
        {
          title: "盘点数",
          key: "num",
          align: "center",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("Input-number", {
                props: {
                  placeholder: "填写数量",
                  value: params.row.num,
                  max: 9999999,
                  min: 0
                },
                on: {
                  "on-change": function(e) {
                    that.$nextTick(() => {
                      params.row.num = e;
                      that.FHNum = e;
                      that.choosedItemListFH[params.index] = params.row;
                    });
                  }
                }
              })
            ]);
          }
        },
        {
          title: "盘差数",
          key: "DifQty",
          align: "center",
          render: (h, params) => {
            return h("div", {}, this.IsComplete == 0 ? params.row.DifQty : "X");
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      choosedItemListFH: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows,
      authorList: state => state.app.authorList
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    setMaterialtData() {
      // 过滤物资列表
      let that = this;
      let arr = [];
      let idList = [];
      let keyWord = that.searchKeyWord;
      // 选中的商品不会出现在待选列表中
      for (let i of that.choosedItemList) {
        idList.push(i.id);
      }
      for (let i of that.materialsData) {
        if (idList.indexOf(i.ID) <= -1) {
          // 搜索
          if (
            i.ProductName.indexOf(keyWord) > -1 ||
            i.ProductNum.indexOf(keyWord) > -1
          ) {
            arr.push(i);
          }
        }
      }
      return arr;
    },
    setSmallModalTitle() {
      let that = this;
      return "物资";
    }
  },
  methods: {
    ButtonQD(ID) {
      let that = this;
      let data = {
        OrderNum: that.OrderNum,
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Id: ID,
        Num: that.FHNum,
        IsDelete: false
      };
      api.StoreWarehouseEditNum(data).then(response => {
        if (response.error_code === "Success") {
          that.$Message.success(response.data);
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    deleteFH(ID) {
      let that = this;
      let data = {
        OrderNum: that.OrderNum,
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Id: ID,
        Num: that.FHNum,
        IsDelete: true
      };
      api.StoreWarehouseEditNum(data).then(response => {
        if (response.error_code === "Success") {
          that.$Message.success(response.data);
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    chooseOption(name, value) {
      this.formValidate.InType = value;
    },
    shuangji() {
      let that = this;
      that.searchKeyWord = "";
      that.commit;
      that.$store.commit("changeLoadingPage");
      that.getCustomsList();
      that.modal3 = true;
    },
    shenhe() {
      //审核
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal4 = true;
    },
    //提示框
    ok() {
      let that = this;
      that.Status = 2;
      let data = {
        OrderNum: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.shenheYJ
      };
      api.StoreWarehouseAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
        } else {
          that.$Message.success(response.data);
        }
        that.modal4 = false;
        that.getList();
      });
    },
    cancel() {
      let that = this;
      that.Status = 3;
      let data = {
        OrderNum: that.OrderNum,
        employeeId: that.userMes.EmployeeID,
        Status: that.Status,
        StoreId: that.userMes.StoreID,
        Remark: that.shenheYJ
      };
      api.StoreWarehouseAudit(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
        } else {
          that.$Message.success(response.data);
        }
        that.modal4 = false;
        that.getList();
      });
    },
    fuhe() {
      //复核
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.FHdisable = false;
      that.FH = 1;
      that.FHFY = 1;
      that.modal5 = true;
      that.getDetail();
    },
    //复核提示框

    fuheok() {
      let that = this;
      that.Status = 6;
      let data = {
        OrderNum: that.OrderNum,
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID
      };
      api.StoreWarehouseAuditStep1(data).then(response => {
        if (response.error_code == "Fail") {
          that.$Message.success(response.error_message);
        } else {
          that.$Message.success(response.data);
        }
        that.modal5 = false;
        that.getList();
      });
    },
    fuhecancel() {
      let that = this;
      that.modal5 = false;
    },
    xiugai() {
      // 修改
      let that = this;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.FH = 0;
      that.showLook = true;
      that.stopuse = false;
      that.modal1 = true;
      that.modeTX = 2;
      that.getDetail();
    },
    liulan() {
      // 浏览
      let that = this;
      that.stopuse = true;
      if (!that.OrderNum) {
        that.$Message.error("请选择一个商品");
        return false;
      }
      that.modal6 = true;
      that.FHdisable = true;
      that.FH = 1;
      that.getDetail();
    },
    addMode() {
      // 添加
      let that = this;
      that.modal1 = true;
      that.stopuse = false;
      that.modeTX = 1;
      that.showLook = false;
    },
    chooseRow(row) {
      // 选中某一行修改
      let that = this;
      that.OrderNum = row.OrderNum;
      if (that.OrderNum) {
        that.showEdit = false;
      }
    },
    searchForm() {
      // 搜索表格
      let that = this;
      //判断两个时间段大小
      echartsCommon.message = that.$Message;
      if (
        echartsCommon.ContrastTime(
          that.formItem.startDate,
          that.formItem.endDate,
          that.formItem.startDate2,
          that.formItem.endDate2
        )
      ) {
        that.tablePage.page = 1;
        that.getList();
      }
      //------------------
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    setData(res) {
      let that = this;
      res.Model.CreateTime = moment(res.Model.CreateTime).format("YYYY-MM-DD");
      that.formValidate.ContractOrder = res.Model.ContractOrder;
      that.formValidate.CreateTime = res.Model.CreateTime;
    },
    showDelDetailPoup(index) {
      let that = this;
      if (that.FH == 0) {
        that.choosedItemList.splice(index, 1);
      } else {
        that.choosedItemListFH.splice(index, 1);
      }
    },
    resetForm() {
      let that = this;
      that.choosedItemList = [];
      that.formValidate.Remark = "";
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    getDetail() {
      // 获取出库商品明细
      let that = this;
      let data = {
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Key: that.OrderNum,
        pageindex: that.tablePageFH.page,
        pagesize: that.tablePageFH.pageNum
      };
      that.$store.commit("changeLoadingPage");
      api.getDetailByOrderNum(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          // 设置数据
          if (that.FH == 0) {
            that.setDetail(response.data);
          } else {
            that.$set(that.tablePageFH, "page", response.data.Result.page);
            that.$set(that.tablePageFH, "pageNum", response.data.Result.size);
            that.$set(that.tablePageFH, "allNum", response.data.Result.total);
            that.$set(
              that.tablePageFH,
              "maxPageNum",
              response.data.Result.totalPage
            );
            that.setPage();
            that.setDetailFH(response.data);
          }
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    setDetail(res) {
      let that = this;
      that.choosedItemList = [];
      that.setData(res);
      for (let i in res.Result.list) {
        let dom = res.Result.list[i];
        let a = {
          OrderNum: dom.OrderNum,
          ProductNum: dom.ProductNum,
          ProductName: dom.ProductName,
          Standard: dom.Standard,
          CategoryName: dom.CategoryName
        };
        that.choosedItemList.push(a);
      }
      that.modal1 = true;
    },
    setDetailFH(res) {
      let that = this;
      that.choosedItemListFH = [];
      that.IsComplete = res.Model.IsComplete;
      that.setData(res);
      for (let i in res.Result.list) {
        let dom = res.Result.list[i];
        let a = {
          ID: dom.Id,
          OrderNum: dom.OrderNum,
          ProductNum: dom.ProductNum,
          ProductName: dom.ProductName,
          Standard: dom.Standard,
          CategoryName: dom.CategoryName,
          num: dom.FirstQty,
          LocalQty: dom.LocalQty,
          DifQty: dom.DifQty.toFixed(2)
        };
        that.choosedItemListFH.push(a);
      }
    },
    setUploadData() {
      // 设置提交数据
      let that = this;
      let data = {
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Remark: that.formValidate.Remark,
        CreateTime: moment(that.formValidate.CreateTime).format("YYYY-MM-DD"),
        ContractOrder: that.formValidate.ContractOrder,
        GoodsIds: []
      };
      // 添加物资记录
      for (let i of that.choosedItemList) {
        data.GoodsIds.push(i.GoodsId);
      }
      return data;
    },
    setUploadData1() {
      // 设置提交数据
      let that = this;
      let data = {
        OrderNum: that.OrderNum,
        EmployeeId: that.userMes.EmployeeID,
        StoreId: that.userMes.StoreID,
        Remark: that.formValidate.Remark,
        CreateTime: moment(that.formValidate.CreateTime).format("YYYY-MM-DD"),
        ContractOrder: that.formValidate.ContractOrder,
        GoodsIds: []
      };
      // 添加物资记录
      for (let i of that.choosedItemList) {
        data.GoodsIds.push(i.ProductNum);
      }
      return data;
    },
    addForm() {
      let that = this;
      if (that.choosedItemList.length <= 0) {
        that.$Message.error("请选择入库商品");
        return false;
      }
      if (that.choosedItemList.length <= 0) {
        that.$Message.error("请选择入库商品");
        return false;
      }
      that.onLoading = true;
      if (that.modeTX == 1) {
        //点击添加时的保存按钮;
        api.StoreWarehouseAdd(that.setUploadData()).then(response => {
          that.onLoading = false;
          if (response.error_code === "Success") {
            that.$Message.success("提交成功");
            that.resetForm();
            that.getList();
          } else {
            that.$Message.error(response.error_message);
          }
        });
      }
      if (that.modeTX == 2) {
        //点击修改时的保存按钮
        api.StoreWarehouseEdit(that.setUploadData1()).then(response => {
          that.onLoading = false;
          if (response.error_code === "Success") {
            that.$Message.success("修改成功");
            that.resetForm();
            that.getList();
          } else {
            that.$Message.error(response.error_message);
          }
        });
      }
    },
    // 选择物资
    selectMaterial(selection) {
      // 选中的物资列表
      let that = this;
      that.selection = selection;
    },
    smalladdForm() {
      let that = this;
      // 选择物资
      for (let i in that.selection) {
        let a = {
          ProductNum: that.selection[i].ProductNum,
          Unit: that.selection[i].Unit,
          Standard: that.selection[i].Standard,
          ProductName: that.selection[i].ProductName,
          GoodsId: that.selection[i].BarCode
        };
        that.choosedItemList.push(a);
      }
      that.modal2 = false;
      that.modal3 = false;
    },
    smallResetForm() {
      let that = this;
      that.modal2 = false;
      that.modal3 = false;
    },
    showSmallModal() {
      // 展示物资弹窗
      let that = this;
      that.searchKeyWord = "";
      that.commit;
      that.$store.commit("changeLoadingPage");
      that.getSalesGoodsList();
      that.modal2 = true;
    },
    showRemark(row) {
      // 显示备注
      let that = this;
      that.$Modal.info({
        title: "备注详情",
        content: row.Remark
      });
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      if (that.FHFY == 0) {
        let teblePage = that.tablePage;
        teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
        let endPage = teblePage.page * teblePage.pageNum;
        teblePage.endNum =
          endPage > teblePage.allNum ? teblePage.allNum : endPage;
      } else {
        var teblePageFH = that.tablePageFH;
        teblePageFH.startNum = teblePageFH.pageNum * (teblePageFH.page - 1) + 1;
        let endPage = teblePageFH.page * teblePageFH.pageNum;
        teblePageFH.endNum =
          endPage > teblePageFH.allNum ? teblePageFH.allNum : endPage;
      }
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      if (that.FHFY == 0) {
        that.tablePage.page--;
        that.getList();
      } else {
        that.tablePageFH.page--;
        that.getDetail();
      }
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      if (that.FHFY == 0) {
        that.tablePage.page++;
        that.getList();
      } else {
        that.tablePageFH.page++;
        that.getDetail();
      }
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      that.FHFY == 0;
      let data = {
        StoreId: that.userMes.StoreID,
        StartDate: that.formItem.startDate,
        EndDate: that.formItem.endDate,
        pageindex: that.tablePage.page,
        pagesize: that.tablePage.pageNum
      };
      // 转换日期
      if (data.StartDate) {
        data.StartDate = moment(data.StartDate).format("YYYY-MM-DD");
      }
      if (data.EndDate) {
        data.EndDate = moment(data.EndDate).format("YYYY-MM-DD");
      }
      that.tableLoading = true;
      api.StoreWarehousecheckList(data).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          that.list = res.list;
          that.tableLoading = false;
          that.$set(that.tablePage, "page", res.page);
          that.$set(that.tablePage, "pageNum", res.size);
          that.$set(that.tablePage, "allNum", res.total);
          that.$set(that.tablePage, "maxPageNum", res.totalPage);
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    //导出
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getSalesGoodsList() {
      // 获取出库产品列表
      let that = this;
      let data = {
        employeeId: that.userMes.EmployeeID,
        productName: that.searchKeyWord
      };
      api.selectInProduct(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          that.materialsData = response.data;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getSalesProjectList() {
      let that = this;
      let data = {
        page: 1,
        size: 1000
      };
      api.getItemsByValid(data).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          that.projectListData = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
      that.isshow = btnQX.apiUrlList("Pandian_shenhe");
      that.shenheisshow = btnQX.apiUrlList("Pandian_fuhe");
    });
  }
};
</script>
<style>
.pannel-title i:hover {
  cursor: pointer;
  color: #94bb6d;
}

.ivu-select-dropdown {
  z-index: 99999;
}

.buttongroup {
  margin-left: 323px;
  margin-top: -33px;
}
.Shenqing-font {
  font-size: 20px;
  font-weight: 900;
}
</style>