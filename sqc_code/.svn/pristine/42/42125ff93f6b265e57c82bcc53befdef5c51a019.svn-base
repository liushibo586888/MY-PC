<template>
  <div class="cwsr-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
        <row :gutter="20"> 
         
          <i-col span="3">
            <FormItem prop="Storelist"> 
                <Cascader v-model="formItem.Storelist" style="width:200px;font-size:14px;font-weight:bold;" :data="storeList" trigger="hover"></Cascader> 
             <!-- <Select v-model="formItem.StoreID" placeholder="门店" :filterable="true">
                <Option value="all" @click.native="choose()">所有</Option>
                <Option v-for="item in storeList" :value="item.ID" :key="item.ID" @click.native="choose(item.Name,item.ID)">{{ item.Name }}</Option>  -->
              </Select>
            </FormItem>
          </i-col>

          <i-col span="3">
            <FormItem prop="PayID"> 
               <!--
              <Cascader :data="data" trigger="hover"></Cascader>--> 
              <Select v-model="formItem.PayID" placeholder="支付方式" style="width:200px"  filterable clearable> 
               <Option v-for="(item,index) in PayWaylist" :value="item.ID" :key="index">{{item.Name}}</Option> 
               </Select>
            </FormItem>
          </i-col> 

      <i-col span="4">
            <formItem prop="ArrayDate"> 
            <DatePicker v-model="formItem.ArrayDate" :value="RangeDate" format="yyyy-MM-dd" type="daterange" :clearable="false" placement="bottom-start" placeholder="选择日期" style="width: 250px"></DatePicker> 
            </formItem>
          </i-col>

          <i-col span="3">
            <formItem class="btn-box">  
              <Button type="primary" shape="circle" icon="ios-search"  @click="searchForm">搜索</Button>  
              <Button type="info" v-show="ActualMoneyShow" style="width:78px;" shape="circle"  @click="ActualModalFrom">添加</Button> 
            <!--<Icon type="ios-add-circle-outline" />  <Button type="primary" class="btn">搜索</Button>
              <Button type="warning" class="btn" @click="resetSearch">重置</Button>-->
            </formItem>
          </i-col>
        </row>
      </Form> 
    </div>
 
    <Modal :mask-closable="false" v-model="ActualModal"  width="800" class-name="vertical-center-modal" draggable>
      <div slot='header' class="header not-print" style="font-size:15px">
        <strong>添加实际到账信息</strong>
      </div>
         <Form :model="AddFormItem"  ref="AddFromModal"   :label-width="300">
        <row> 

      <i-col span="20" v-show="btnShow"> <!-- btnShow 这个是判断确定按钮是否显示的 同时在这里判断编辑时不显示门店-->
            <FormItem style="font-size:14px;font-weight:bold;"placeholder="可以手动输入" label="选择到账门店">
               <Cascader  v-model="AddFormItem.StorelistAdd" style="width:230px;font-size:14px;font-weight:bold;" :data="storeList" trigger="hover"></Cascader> 
            </FormItem>
          </i-col>  

          <i-col span="20">
            <FormItem style="font-size:14px;font-weight:bold;"placeholder="可以手动输入" label="到账的支付方式">
               <Select   v-model="AddFormItem.PayID" style="width:230px" filterable> 
               <Option :disabled="isReadonly" v-for="(item,index) in PayWaylist" :value="item.ID" :key="index">{{item.Name}}</Option> 
               </Select>
            </FormItem>
          </i-col>  

           <i-col span="20" >
            <FormItem style="font-size:14px;font-weight:bold;" label="实际到账时间">
             <DatePicker :readonly="isReadonly"  v-model="AddFormItem.Date" style="width:230px" class="DatePicker_time" type="date" :options="options1" placeholder="到账时间"    ></DatePicker>
            </FormItem>
          </i-col>  

        <i-col span="20" >
        <FormItem  style="font-size:14px;font-weight:bold;" label="实际到账金额">  
          <InputNumber v-model="AddFormItem.ActualMoney" style="width:230px" :max="1000000" :min="0" ></InputNumber>
          </FormItem>
        </i-col> 
         <i-col span="20" >
           <FormItem style="text-align:right;margin-right:12vh;"> 
             <Button style="width:12vh;" type="primary" v-show="btnShow" shape="circle" @click="AddFormInfo">确定</Button>
             <Button style="width:12vh;" type="info" v-show="editShow" shape="circle" @click="EditInfo">修改</Button> 
           </FormItem>
         </i-col> 
        </row>
      </Form> 
       <div slot='footer'></div> 
      <!--
      <tableLoadingPage :loading="tablesloading"></tableLoadingPage>
      -->
    </Modal>

    <div class="table-box" id="tableBox">
      <Table stripe  :columns="columns1" :row-class-name="rowClassName"  :data="list" highlight-row :height="setTableHeight" ref="mainTable"> 
      </Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <!-- <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
            <i-button class="btn btn-prev" type="ghost">上一页</i-button>
            <i-button class="btn btn-next" type="primary">下一页</i-button>
            <div class="page-box">
                <p>前往</p>
                 <Input-number :max="tablePage.maxPageNum" :min="1" :value="1"></Input-number>
                <p>页</p>
            </div> -->
    </div>
  </div>
</template>
<script>
import api from "@/api/index.js";
import { mapState } from "vuex";
import moment from "moment";
import echartsCommon from "@/api/Common.js";
import btnQX from "@/api/btnQX.js";
export default {
  data() {
    return { 
      ActualMoneyShow:false, //判断是否有权限添加实际到账
      //时间回到今天
      //options1: echartsCommon.shortcuts(),
      options1:{
           disabledDate(date){
             return date && date.valueOf() >= Date.now();
           }
      },
      // -----
      tableLoading: false,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },  
      RangeDate:[], //范围日期
      formItem: {
        StartDate: new Date(),
        EndDate: new Date(),
        EmployeeID: "",
        Storelist:[],
        StoreID: null,
        PayID:0,
        ArrayDate:""
      },
      //添加实际到账的信息
      AddFormItem:{
        PayID:"",
        Date:new Date(),
        ActualMoney:0, //实际到账金额
        OperatorPes:"", //当前人
        StoreID:"",
        StorelistAdd:[], //添加真是到账时使用
        ID:"" //记录要编辑那一条的id 修改时使用
      }, 
      tableHeight: 400, 
      ActualModal:false,//添加实际到账信息
      PayWaylist:[], //支付方式列表
      isReadonly:false, //是否只读 编辑金额使用
      btnShow:false, //确定按钮是否显示
      editShow:false, //编辑按钮
      columns1:[
        {
          title:"门店名称",
          key:"StoreName",
          align:"center"
        },
         {
          title:"到账金额",
          key:"ActualMoney",
          align:"center"
        },
        {
          title:"实际到账支付方式",
          key:"PayName",
          align:"center"
        },
        {
          title:"到账日期",
          key:"Date",
          align:"center",
          render:(h,parmas)=>{
             if(parmas.row.StoreName=="合计"){
                return;
              }
             return echartsCommon.changeTime(parmas.row.Date);
          }
        }, 
        {
          title:"录入时间",
          key:"OperatorDate",
          align:"center",
          render:(h,parmas)=>{ 
             if(parmas.row.StoreName=="合计"){
                 return;
              }
              else
              { 
                return echartsCommon.changeTimeHms(parmas.row.OperatorDate);
              }
          }
        },
        {
          title:"操作人",
          key:"OperatorPes",
          align:"center"
        },
        {
          title:"编辑信息", 
          align:"center"
        },
        {
          title:"操作", 
          align:"center",
           render:(h,params)=> { 
            if(params.row.StoreName=="合计"||params.row.ID==0){
              return;
            }
         if(this.ActualMoneyShow){
             return h('div', [ 
                h('Tooltip', {
                 props:{ placement:'top',content:'编辑'  }
                 }, [h('i', { 
                                style: {
                                     marginRight: '5px'
                                },
                               class: {
                                    "ivu-icon": true,
                                    "ivu-icon-aaa-bianji": true,
                                    "icon-btn": true
                                 },
                                on: {
                                    click: () => { 
                                      // console.log(params.row.ID)
                                       this.EditFormInfo(params.row.ID);
                                    }
                                }
                    }),    
                ]),  
            ]);
              }
           }
        }
      ],

      //原来的 财务收入表的数据 2019年12月28日09:42:51 注释 修改成 财务确认表的信息
      // columns1: [
      //   {
      //     title: "项目分类",
      //     key: "ItemCategoryName",
      //     align: "center"
      //   },
      //   {
      //     title: "货币金额",
      //     key: "CashAmount",
      //     align: "center",
      //     render: (h, parmas) => {
      //       let money = Number(parmas.row.CashAmount);
      //       return h("div", {}, money.toFixed(2));
      //     }
      //   },
      //   {
      //     title: "预交金额",
      //     key: "PrepaymentAmount",
      //     align: "center",
      //     render: (h, parmas) => {
      //       let money = Number(parmas.row.PrepaymentAmount);
      //       return h("div", {}, money.toFixed(2));
      //     }
      //   },
      //   {
      //     title: "欠费",
      //     key: "ArrearsAmount",
      //     align: "center",
      //     render: (h, parmas) => {
      //       let money = Number(parmas.row.ArrearsAmount);
      //       return h("div", {}, money.toFixed(2));
      //     }
      //   },
      //   {
      //     title: "总价",
      //     key: "AllTotal",
      //     align: "center",
      //     render: (h, parmas) => {
      //       let money = Number(parmas.row.AllTotal);
      //       return h("div", {}, money.toFixed(2));
      //     }
      //   },
      //   {
      //     title: "代金券",
      //     key: "InsteadMoneyAmount",
      //     align: "center"
      //   }
      // ],
      list: [],
      storeList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    }
  },
  methods: { 
    rowClassName(row,index){  
     return 'demo-table-info-column';
    },
    ActualModalFrom(){ 
      this.ActualModal = true;
      this.btnShow = true; //确定按钮显示
      this.editShow = false; //修改按钮是否显示
       this.isReadonly = false; //是否只读
    },
    //获取支付方式
    GetPayList()
    {
      api.getReturnMoneyPayMent().then(res=>{
        if(res.error_code="Success"){
          this.PayWaylist = res.data.list;
        }
        else
        {
           this.$Message.info({
                content: '到账支付方式获取失败',
                duration: 5
            });
        }
      });
    },
    //编辑实际到账金额
    EditInfo(){  
        api.editRevenueCheck(this.AddFormItem).then(res=>{
          if(res.error_code=="Success")
          {
            this.ActualModal = false;
            this.$Message.info({
                content: "修改成功",
                duration: 5
            });
            this.getList();
          }
          else
          {
            this.$Message.info({
                content: res.error_message==null?"修改失败":res.error_message,
                duration: 5
            });
          }
          

       });
    },
    //添加实际到账
    AddFormInfo()
    { 
      this.AddFormItem.StoreID=this.AddFormItem.StorelistAdd.length>0?this.AddFormItem.StorelistAdd[1]:null;
      this.AddFormItem.OperatorPes = this.userMes.EmployeeID
      this.AddFormItem.Date = echartsCommon.changeTime(this.AddFormItem.Date) 
      api.RevenueMoney(this.AddFormItem).then(res=>{
        
         if(res.error_code=="Success"){
             this.ActualModal = false;
              this.$Message.info({
                content: '添加成功',
                duration: 5
            });
            this.getList();
         }
         else
         {
            this.$Message.info({
                content: res.error_message,
                duration: 5
            });
         }
  
      }) 
    },
    //编辑时间到账金额
    EditFormInfo(ID){ 
       let id = {
         ID:ID
       }
     api.SigleInfo(id).then(res=>{ 
          if(res.error_code=="Success"){  
              this.AddFormItem.ActualMoney = res.data.ActualMoney;
              this.AddFormItem.Date = res.data.Date; 
              this.AddFormItem.PayID=res.data.PayID;
              this.AddFormItem.ID = res.data.ID; 
          }    
          else
          {
               this.$Message.info({
                content: res.error_message,
                duration: 5
               });
               return;
          }
       });

       this.ActualModal = true;
      this.isReadonly=true;
      this.editShow = true; 
       this.btnShow = false;
       this.isReadonly = true; 
    },
    resetSearch() {
      // 重置搜索
      let that = this;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    searchForm() {
      // 搜索表格
      let that = this;
      //判断两个时间段大小
      echartsCommon.message = that.$Message;
       that.getList(); 
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    getList() {
      let that = this; 
      let userMessage = JSON.parse(localStorage.userMessage);
      that.formItem.EmployeeID = userMessage.EmployeeID;
      let data = that.formItem;
      if (data.ArrayDate.length>0) { 
        data.StartDate = echartsCommon.changeTime(data.ArrayDate[0]);
         data.EndDate = echartsCommon.changeTime(data.ArrayDate[1]);
        that.formItem.StartDate = data.StartDate;
        that.formItem.EndDate = data.EndDate;
      }  
      that.formItem.StoreID = data.Storelist.length>0?data.Storelist[1]:null;  

     that.tableLoading = true;
     api.RevenueCheckList(that.formItem).then(res=>{
        that.tableLoading = false;  
        if(res.error_code=="Success"){
           that.list =  res.data;
           let Total={
               StoreName:"合计",
               ActualMoney:0
           }
           res.data.forEach(x=>{
               Total.ActualMoney+=Number(x.ActualMoney)
           });
           if(that.list.length>0){
               that.list.push(Total);
           }
        }
        else
        {
           this.$Message.info({
                content: res.error_message,
                duration: 5
            });
        } 
     });
      //原来的财务收入查询的数据 
      //that.tableLoading = true;
      // api.getFinancialIncomeStatement(that.formItem).then(response => {
      //   that.tableLoading = false;
      //   if (response.error_code === "Success") {
      //     that.list = response.data.list;
      //     let a = {
      //       ItemCategoryName: "合计",
      //       CashAmount: 0,
      //       PrepaymentAmount: 0,
      //       ArrearsAmount: 0,
      //       AllTotal: 0,
      //       InsteadMoneyAmount: 0
      //     };
      //     for (let i of that.list) {
      //       a.CashAmount += Number(i.CashAmount);
      //       a.PrepaymentAmount += Number(i.PrepaymentAmount);
      //       a.ArrearsAmount += Number(i.ArrearsAmount);
      //       a.AllTotal += Number(i.AllTotal);
      //       a.InsteadMoneyAmount += Number(i.InsteadMoneyAmount);
      //     }
      //     if (that.list.length > 0) {
      //       that.list.push(a);
      //     }
      //   } else {
      //     that.$Message.error(response.error_message);
      //   }
      // });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    // 获取有效门店
    getStore() {
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID
      };
      api.GetCascaderStore(data).then(res => { 
            if(res.error_code=="Success"){
              if(res.data.length>0)
              {
                let city = res.data[0].value;
                let store =  res.data[0].children[0].value
                that.formItem.Storelist=[city,store];
              } 
              that.storeList = res.data;
              that.GetPayList(); //获取门店成功后再获取支付方式
              that.searchForm();
            }
            else
            {
                 this.$Message.info({
                  content: res.error_message,
                   duration: 5
                 });
            } 
      });
    },
    choose(name, id) {
      if (name === undefined && id === undefined) {
        this.formItem.store = "所有";
        this.formItem.StoreID = null;
      } else {
        this.formItem.store = name;
        this.formItem.StoreID = id;
      }
    },
    //设置日期
    Yesterday()
    {
      let oneday = 1000 * 60 * 60 * 24;
      let today = new Date();
      let dt = new Date(today - oneday); 
       this.RangeDate.push(dt);
      this.RangeDate.push(new Date());
      this.formItem.ArrayDate =  this.RangeDate;
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight(); 
      that.Yesterday();  
      that.getStore(); 
      that.ActualMoneyShow = btnQX.apiUrlList("/finance/RevenueMoney"); //接收是否有退费权限
    });
  }
};
</script>
<style>  
  .vertical-center-modal{
        display: flex;
        align-items: center;
        justify-content: center; 
    }
  .ivu-icon{
     font-size:16px;
  }
    .demo-table-info-column{
        background-color: #2db7f5;
        color: #fff;
    }
</style>