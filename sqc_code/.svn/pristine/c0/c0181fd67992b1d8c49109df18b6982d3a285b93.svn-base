<template>
    <div class="QYjysh-container container">
        <div class="search-box">
            <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
                <row :gutter="20">
                    <i-col span="3">
                        <formItem prop="startDate">
                            <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col>
                    <i-col span="3">
                        <formItem prop="endDate">
                            <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col>
                    <i-col span="3">
                        <FormItem prop="sCityName">
                            <Select v-model="formItem.sCityName" placeholder="门店" :filterable="true">
                                <Option v-for="item in storeList" :value="item.Name" :key="item.ID" @click.native="choose(item.Name,item.ID)">{{ item.Name }}</Option>
                            </Select>
                        </FormItem>
                    </i-col>
                    <i-col span="15">
                        <formItem class="btn-box">
                            <Button type="primary" class="btn" @click="getList">查询</Button>
                            <Button type="warning" class="btn" @click="resetSearch">重置</Button>
                        </formItem>
                    </i-col>
                </row>
            </Form>

        </div>
        <!-- 图表 -->
        <div class="form-box">
            <div class="charts">
                <div class="header">
                    护理客执行排名
                </div>
                <div class="content">
                    <tableLoadingPage :loading="spinShow"></tableLoadingPage>
                    <div id="data_source_com" class="forms"></div>
                </div>
            </div>
        </div>
    </div>
</template>
<script>
import moment from "moment";
import { mapState } from "vuex";
import api from "@/api/index.js";
import echarts from "echarts";
export default {
  data() {
    return {
      //时间回到今天
      options1: {
        shortcuts: [
          {
            text: "今天",
            value() {
              return new Date();
            }
          }
        ]
      },
      // -----
      spinShow: true,
      formItem: {
        startDate: new Date(),
        endDate: new Date(),
        sCity: "",
        sCityName: ""
      },
      list: [],
      storeList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      authorList: state => state.app.authorList,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let h = 440;
      if (window.innerHeight > 900) {
        h = 540;
      }
      return h / 768 * window.innerHeight;
    },
    setAuthor() {
      // 判断用户是否有查看客户详情权限
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "增加") {
            return i.IsVisible;
            break;
          }
        }
      } else {
        return false;
      }
    }
  },
  methods: {
    choose(name, id) {
      this.formItem.sCity = id;
    },
    searchList() {
      let that = this;
      if (that.formItem.startDate && that.formItem.endDate) {
        // 两者同时存在
        if (Number(that.formItem.startDate) > Number(that.formItem.endDate)) {
          that.$Message.error("开始日期不得大于结束日期");
          return false;
        }
      }
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    setEcharts(pieData, barName) {
      let that = this;
      that.$nextTick(() => {
        var dataSourcePie = echarts.init(
          document.getElementById("data_source_com")
        );
        let optionPie = {
          color: [
            "#60d388",
            "#8378ea",
            "#e7bcf3",
            "#fb7293",
            "#e25c2f",
            "#ff9f7f",
            "#ffdb5c",
            "#9fe6b8",
            "#5fd1dd",
            "#37a2da",
            "#d94e81"
          ],
          tooltip: {
            trigger: "item",
            formatter: "{a} {b} : {c} (人)"
          },
          toolbox: {
            show: true,
            feature: {
              dataView: { show: true, readOnly: false },
              restore: { show: true },
              saveAsImage: { show: true }
            }
          },
          xAxis: {
            // name: '店铺名称',
            type: "category",
            axisLine: {
              lineStyle: {
                type: "solid",
                color: "#999",
                width: "1"
              }
            },
            data: []
          },
          yAxis: {
            // name: '成交量',
            axisLine: {
              lineStyle: {
                type: "solid",
                color: "#999",
                width: "1"
              }
            },
            axisLabel: {
              textStyle: {
                color: "#333"
              }
            },
            type: "value"
          },
          grid: {
            width: "66%",
            left: "17%",
            height: "70%"
          },
          legend: {
            data: barName,
            width: "100%",
            bottom: 15
          },
          series: pieData
        };

        dataSourcePie.setOption(optionPie);
        that.spinShow = false;
        window.addEventListener("resize", function() {
          dataSourcePie.resize();
        });
      });
    },
    getList() {
      setTimeout(() => {
        let that = this;
        let data = {
          StartDate: that.formItem.startDate,
          EndDate: that.formItem.endDate,
          sCity: that.formItem.sCity
        };
        if (data.StartDate) {
          data.StartDate = moment(data.StartDate).format("YYYY-MM-DD");
        }
        if (data.EndDate) {
          data.EndDate = moment(data.EndDate).format("YYYY-MM-DD");
        }
        that.spinShow = true;
        api.getReviewCustNum(data).then(response => {
          if (response.error_code === "Success") {
            that.list = response.data.list;
            that.setPieData();
          } else {
            that.$Message.error(response.error_message);
          }
        });
      }, 200);
    },
    setPieData() {
      let that = this;
      let pieData = [];
      let barName = [];
      let colorList = [
        "#60d388",
        "#8378ea",
        "#e7bcf3",
        "#fb7293",
        "#e25c2f",
        "#ff9f7f",
        "#ffdb5c",
        "#9fe6b8",
        "#5fd1dd",
        "#37a2da",
        "#d94e81"
      ];

      for (let i in that.list) {
        // 柱状图(人)
        var a = {
          data: [],
          name: that.list[i].Name,
          type: "bar"
        };
        a.data.push(that.list[i].CustNum);
        pieData.push(a);
        barName.push(that.list[i].Name);
      }
      console.log(pieData);
      that.setEcharts(pieData, barName);
    },
    // 获取区域列表
    getStore() {
      let that = this;
      api.GetAllCityInfo().then(response => {
        if (response.error_code === "Success") {
          that.storeList = response.data.list;
          that.formItem.sCityName = that.storeList[0].Name;
          that.formItem.sCity = that.storeList[0].ID;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    }
  },
  mounted() {
    let that = this;
    that.getList();
    that.getStore();
  }
};
</script>
<style>
</style>