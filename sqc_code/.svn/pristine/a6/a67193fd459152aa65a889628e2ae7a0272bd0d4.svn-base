<template>
  <keep-alive>
    <div class="zfmx-container container">
      <div class="search-box">
        <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
          <row :gutter="20">
            <i-col span="3">
              <formItem prop="StartDate">
                <DatePicker type="date" placeholder="开始日期" class="DatePicker_time" :options="options1" v-model="formItem.StartDate" :clearable="false" :editable="false"></DatePicker>
              </formItem>
            </i-col>
            <i-col span="3">
              <formItem prop="EndDate">
                <DatePicker type="date" placeholder="结束日期" class="DatePicker_time" :options="options1" v-model="formItem.EndDate" :clearable="false" :editable="false"></DatePicker>
              </formItem>
            </i-col>
            <i-col span="3">
              <FormItem prop="userName">
                <Input v-model="formItem.userName" placeholder="姓名" />
              </FormItem>
            </i-col>
            <i-col span="15">
              <formItem class="btn-box">
                <Button type="primary" class="btn btn-search" @click="searchForm">搜索</Button>
                <Button type="warning" class="btn btn-reset" @click="resetSearch">重置</Button>
                <!-- <Button type="success" class="btn btn-search" @click="searchForm">添加</Button>
                            <Button type="error" class="btn btn-reset" @click="resetSearch">修改</Button> -->
              </formItem>
            </i-col>
          </row>
        </Form>
      </div>

      <div class="table-box" id="tableBox">
        <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable" @on-row-click="getRowID" @on-row-dblclick="dblclickRow"></Table>
        <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
      </div>

      <div class="bottom-box">
        <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
        <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
          <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
        </Select>

        <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
        <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
        <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
        <div class="page-box">
          <p>前往</p>
          <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
          <p>页</p>
        </div>
      </div>
    </div>
  </keep-alive>
</template>
<script>
import api from "@/api/index.js";
import { mapState } from "vuex";
import moment from "moment";
import echartsCommon from "@/api/Common.js";
export default {
  data() {
    return {
      options1: echartsCommon.shortcuts(), //时间回到今天
      tableLoading: true,
      rowID: "",
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      tableHeight: 40,
      formItem: {
        StartDate: new Date(),
        EndDate: new Date(),
        EmployeeID: "",
        userName: "",
        store: "all"
      },
      columns1: [
        {
          title: "客服姓名",
          key: "author",
          align: "center",
          width: 150
        },
        // {
        //   title: "电话",
        //   key: "CustomerPhone",
        //   align: "center",
        //   render: (h, params) => {
        //     return echartsCommon.CustomerPhone(params.row.CustomerPhone);
        //   }
        // },

        {
          title: "祛痘收入",
          key: "qd",
          align: "center",
          width: 150
        },
        {
          title: "皮肤收入",
          key: "pf",
          align: "center",
          width: 150
        },
        {
          title: "产品收入",
          key: "cp",
          align: "center",
          width: 150
        },
        {
          title: "体验项目收入",
          key: "ty",
          align: "center",
          width: 150
        },
        {
          title: "总客单数",
          key: "zrs",
          align: "center",
          width: 150
        },
        {
          title: "成交率",
          key: "sjl",
          align: "center",
          width: 150,
          render: (h, params) => {
            if (params.row.sjl == "0%") {
              return "0%";
            } else {
              let length = params.row.sjl.length;
              let sjl =
                Number(params.row.sjl.slice(0, length - 1)).toFixed(2) + "%";
              return h("div", {}, sjl);
            }
          }
        },
        {
          title: "客户消费总金额",
          key: "zh",
          align: "center",
          width: 150
        },
        {
          title: " ",
          key: "",
          align: "center"
        }
      ],
      list: [],
      storeList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    }
  },
  methods: {
    getRowID(row) {
      let that = this;
      that.rowID = row.author;
    },
    dblclickRow(row) {
      let that = this;
      // console.log(row);
      that.$router.push({
        path: "/xqkfyj",
        query: {
          ID: that.rowID,
          Sdate: echartsCommon.changeTime(that.formItem.StartDate),
          Edate: echartsCommon.changeTime(that.formItem.EndDate)
        }
      });
    },
    searchForm() {
      // 搜索表格
      let that = this;
      //判断两个时间段大小
      echartsCommon.message = that.$Message;
      if (
        echartsCommon.ContrastTime(
          that.formItem.StartDate,
          that.formItem.EndDate
        )
      ) {
        that.tablePage.page = 1;
        that.getList();
      }
      //------------------
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      setTimeout(() => {
        let that = this;
        let data = {
          // EmployeeID: that.userMes.EmployeeID,
          author: that.formItem.userName,
          StarDate: that.formItem.StartDate,
          EndDate: that.formItem.EndDate,
          page: that.tablePage.page,
          size: that.tablePage.pageNum
        };
        data.StarDate = echartsCommon.changeTime(data.StarDate);
        data.EndDate = echartsCommon.changeTime(data.EndDate);
        that.tableLoading = true;
        api.ConsumptionSum(data).then(res => {
          if (res.error_code === "Success") {
            that.formItem.userName = "";
            that.list = res.data.Asum;
            that.tableLoading = false;
            that.page = res.data.page;
            that.tablePage.allNum = res.data.total;
            that.tablePage.maxPageNum = res.data.totalPage;
            that.setPage();
          } else {
            that.$Message.error(res.error_message);
          }
        });
      }, 100);
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      // that.getList();
    });
  },
  created() {
    let that = this;
    that.$nextTick(() => {
      that.getList();
    });
  }
};
</script>
<style>
</style>

