<template>
  <div class="sf-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
        <row :gutter="20">
          <i-col span="3">
            <formItem prop="startDate">
              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <formItem prop="endDate">
              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="userName">
              <Input v-model="formItem.userName" placeholder="姓名"></Input>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="userTel">
              <Input v-model="formItem.userTel" placeholder="电话"></Input>
            </FormItem>
          </i-col>
          <i-col span="12">
            <formItem class="btn-box">
              <i-button type="primary" class="btn" @click="searchForm" :loading="uploading">搜索</i-button>
              <i-button type="warning" class="btn" @click="resetSearch" :loading="uploading">重置</i-button>
              <Button type="warning" class="btn btn-add" @click="checkBillStatus" v-if="showAdd" :disabled="!rowID">收费</Button>
              <!-- <Button type="warning" class="btn btn-purple" @click="seeCharge" v-if="showEdit" :disabled="!rowID">浏览</Button> -->
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>
    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable" @on-current-change="getRowID"></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>

    <!-- 弹窗 -->
    <Modal :mask-closable="false" v-model="modal1" class="dialog" width="1200" v-if="showAdd || showEdit">
      <div slot='header' class="header not-print">
        收费
      </div>
      <div slot='close' class="close not-print">
        <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
      </div>
      <!-- 收费表格 添加用 -->
      <div class="table-box">
        <i-table stripe :columns="chargeTableHead" :data="chargeTableData"></i-table>
      </div>
      <div slot="footer" class="footer not-print">
        <Button class="btn-sure" type="primary" @click="addForm" :loading="uploading">保存</Button>
        <Button class="btn-cancel" type="warning" @click="resetForm" :loading="uploading">取消</Button>
      </div>
    </Modal>
    <!-- 删除提示 -->
    <Modal :mask-closable="false" v-model="delPoup" title="提示" @on-ok="delSingleDetail">
      确认删除该条？
    </Modal>
    <!-- ** -->
  </div>
</template>
<script>
const Decimal = require("decimal");
import api from "@/api/index.js";
import Vue from "vue";
import { mapState } from "vuex";
import moment from "moment";
import echartsCommon from "@/api/Common.js";
export default {
  data() {
    return {
      //时间回到今天
      options1: echartsCommon.shortcuts(),
      // -----
      showAdd: false,
      showEdit: false,
      mode: 1, // 1新增 2浏览
      rowID: "",
      rowPhone: "",
      uploading: false,
      canPrint: false,
      ExcutionNumber: "", // 确诊单编号
      Handle: "", // 开单人姓名
      // 确诊单合计金额
      ConsumptionTotal: 0,
      tableLoading: true,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      tableHeight: 200,
      onPrint: false,
      number: true,
      delDetailIndex: 0,
      delPoup: false,
      modal1: false,
      formValidate: {
        CustomerName: "",
        CustomerAge: "",
        CustomerSex: "",
        TMKEmployeeName: "",
        SceneEmployeeName: "",
        ArrearsBalance: 0,
        HandselBalance: 0,
        CashBalance: 0,
        IntegrationBalance: 0,
        HandleBy: "",
        Remark: ""
      },
      formValidateRule: {
        HandleBy: {
          required: true,
          message: "请选择开单人",
          trigger: "blur"
        }
      },
      formItem: {
        startDate: new Date(),
        endDate: new Date(),
        userTel: "",
        userName: ""
      },
      columns1: [
        {
          title: "开单日期",
          key: "Date",
          align: "center",
          render: (h, params) => {
            if (!params.row.Date) {
              return h("div", {}, "");
            }
            return h(
              "div",
              {},
              moment(params.row.Date).format("YYYY-MM-DD HH:mm:ss")
            );
          }
        },
        {
          title: "客户姓名",
          key: "CustomerName",
          align: "center"
        },
        {
          title: "电话",
          key: "CustomerPhone",
          align: "center"
        },
        {
          title: "单据状态",
          key: "StatusText",
          align: "center"
        },
        {
          title: "收费人",
          key: "ChargeByName",
          align: "center"
        },
        {
          title: "收费日期",
          key: "ChargeDate",
          align: "center",
          render: (h, params) => {
            if (params.row.ChargeDate) {
              return h(
                "div",
                {},
                moment(params.row.ChargeDate).format("YYYY-MM-DD HH:mm:ss")
              );
            } else {
              return h("div", {}, "");
            }
          }
        },
        {
          title: "总价",
          key: "Total",
          align: "center",
          render: (h, params) => {
            if (!params.row.Total) {
              return "";
            }
            return h("div", {}, params.row.Total.toFixed(2));
          }
        },
        {
          title: "备注",
          key: "Remark",
          ellipsis: true,
          align: "center",
          render: (h, parmas) => {
            if (!parmas.row.Remark) {
              return "";
            }
            let text =
              parmas.row.Remark.length > 10
                ? parmas.row.Remark.substr(0, 10) + "...."
                : parmas.row.Remark;
            return h(
              "div",
              {
                on: {
                  click: () => {
                    this.showRemark(parmas.row);
                  }
                }
              },
              text
            );
          }
        },
        {
          title: " ",
          align: "center",
          width: 10
        }
      ],
      list: [],
      alreadyPaid: false,
      detailData: [],
      // 支付方式列表
      chargeTableHead: [
        {
          title: "序号",
          type: "index",
          align: "center"
        },
        {
          title: "支付方式",
          align: "center",
          key: "PayModeID",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h(
                "Select",
                {
                  props: {
                    value: that.chargeTableData[params.index].PayModeID,
                    "label-in-value": true
                  },
                  on: {
                    "on-change": event => {
                      params.row.PayModeID = event.value;
                      that.chargeTableData[params.index].PayModeID =
                        event.value;
                      that.myPaymentMode[params.index] = event.label;
                    }
                  }
                },
                that.volumeTypes.map(function(type) {
                  return h(
                    "Option",
                    {
                      props: {
                        value: type.ID
                      }
                    },
                    type.Name
                  );
                })
              )
            ]);
          }
        },
        {
          title: "金额",
          align: "center",
          key: "Amount",
          render: (h, params) => {
            let that = this;
            return h("div", [
              h("InputNumber", {
                props: {
                  placeholder: "请填写金额",
                  value: that.chargeTableData[params.index].Amount,
                  max: 99999999999,
                  min: 0.01
                },
                on: {
                  "on-change": e => {
                    params.row.Amount = e;
                    that.chargeTableData[params.index] = params.row;
                  }
                }
              })
            ]);
          }
        },
        {
          title: "操作",
          align: "center",
          render: (h, params) => {
            return h("div", [
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-tianjia": true,
                  "icon-btn": true
                },
                on: {
                  click: () => {
                    this.addCharge(params.index);
                  }
                },
                style: {
                  marginRight: "20px"
                }
              }),
              h("i", {
                class: {
                  "ivu-icon": true,
                  "ivu-icon-aaa-icon-shanchu": true,
                  "icon-btn": true
                },
                on: {
                  click: () => {
                    this.delCharge(params.index);
                  }
                },
                style: {
                  marginRight: "5px"
                }
              })
            ]);
          }
        },
        {
          title: " ",
          align: "center",
          width: 10
        }
      ],
      chargeTableData: [],
      volumeTypes: [],
      HandleList: [],
      // 我的支付方式 保存文字
      myPaymentMode: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      authorList: state => state.app.authorList,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    getDate() {
      let date = new Date();
      return `${date.getFullYear()}/${date.getMonth() +
        1} ${date.getDate()}  ${date.toLocaleTimeString()}`;
    }
  },
  methods: {
    checkAuthor() {
      let that = this;
      let name = that.$route.name;
      let list = that.authorList[name];
      for (let i of list) {
        if (i.Name === "增加") {
          that.showAdd = i.IsVisible;
        }
        if (i.Name === "浏览") {
          that.showEdit = i.IsVisible;
        }
      }
    },
    getRowID(row) {
      let that = this;
      that.rowID = row.ID;
      that.rowPhone = row.CustomerPhone;
    },
    handleSpinShow() {
      // 加载框
      let that = this;
      that.$store.commit("changeLoadingPage");
    },
    hideSpin() {
      // 隐藏
      let that = this;
      that.$store.commit("changeLoadingPage");
    },
    searchForm() {
      // 搜索表格
      let that = this;
      //判断两个时间段大小
      echartsCommon.message = that.$Message;
      if (
        echartsCommon.ContrastTime(
          that.formItem.startDate,
          that.formItem.endDate
        )
      ) {
        that.tablePage.page = 1;
        that.getList();
      }
      //------------------
    },
    resetSearch() {
      let that = this;
      that.$refs.searchForm.resetFields();
      that.tablePage.page = 1;
      that.getList();
    },
    showDelDetailPoup(index) {
      let that = this;
      that.delDetailIndex = index;
      that.delPoup = true;
    },
    delSingleDetail() {
      // 删除单条收费详情
      let that = this;
      that.detailData.splice(that.delDetailIndex);
    },
    resetForm() {
      let that = this;
      //   that.$refs.formValidate1.resetFields();
      that.formValidate.Remark = "";
      that.detailData = [];
      that.chargeTableData = [];
      that.modal1 = false;
    },
    checkBillStatus() {
      let that = this;
      that.resetForm();
      if (!that.rowID) {
        that.$Message.error("请先选择一条订单");
        return false;
      }
      //   console.log(1)
      that.mode = 1;
      let data = {
        consumptionID: that.rowID
      };
      //   console.log(2)
      that.$store.commit("changeLoadingPage");
      //   console.log(3)
      that.resetForm();
      //   console.log(4)
      api.isAllowCharge(data).then(response => {
        // 可以收费 添加
        if (response.error_code === "Success") {
          // that.searchCustomerTel(that.rowPhone)

          api.seeCharge(that.rowID).then(response => {
            that.$store.commit("changeLoadingPage");
            if (response.error_code === "Success") {
              //  console.log(5)
            } else {
              that.$Message.error(response.error_message);
            }
          });
          that.getConsumptionsList(that.rowID);
          that.ExcutionNumber = that.rowID;
          that.modal1 = true;
        } else {
          // 不可收费
          that.$store.commit("changeLoadingPage");
          that.$Modal.warning({
            title: "提示",
            content: "该订单不可收费",
            onOk: () => {}
          });
        }
      });
    },
    addForm() {
      let that = this;
      for (let i in that.chargeTableData) {
        let data = that.chargeTableData[i];

        // 判断支付方式
        if (!data.PayModeID) {
          that.$Message.error("支付方式不得为空");
          return false;
        }
      }
    },
    addCharge() {
      // 添加收款方式
      let that = this;
      let a = {
        PayModeID: "",
        Amount: 10
      };
      let sum = 0;
      // 计算总金额
      for (let i in that.chargeTableData) {
        sum += that.chargeTableData[i].Amount;
      }
      // a.Amount = that.ConsumptionTotal - sum
      let allAmount = new Decimal(that.ConsumptionTotal);
      a.Amount = allAmount.sub(sum).toNumber();
      if (a.Amount < 0) {
        a.Amount = 0;
      }
      that.chargeTableData.push(a);
    },
    delCharge(index) {
      // 删除收款方式
      let that = this;
      if (that.chargeTableData.length > 1) {
        that.chargeTableData.splice(index, 1);
      }
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    getList() {
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID,
        startDate: that.formItem.startDate,
        endDate: that.formItem.endDate,
        CustomerName: that.formItem.userName,
        CustomerPhone: that.formItem.userTel,
        page: that.tablePage.page,
        size: that.tablePage.pageNum
      };
      if (data.CustomerPhone) {
        let regex = /^1\d{10}$/;
        if (!regex.test(data.CustomerPhone)) {
          that.$Message.error("电话号码格式有误");
          return false;
        }
      }
      // 转换日期
      if (data.startDate) {
        data.startDate = moment(data.startDate).format("YYYY-MM-DD");
      }
      if (data.endDate) {
        data.endDate = moment(data.endDate).format("YYYY-MM-DD");
      }
      that.tableLoading = true;
      api.chargeGetList(data).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          for (let i of res.list) {
            let phone = i.CustomerPhone;
            i.CustomerPhone =
              phone.substring(0, 3) + "****" + phone.substr(phone.length - 4);
          }
          that.list = res.list;
          that.tableLoading = false;
          that.$set(that.tablePage, "page", res.page);
          that.$set(that.tablePage, "allNum", res.total);
          that.tablePage.maxPageNum = res.totalPage;
          //   that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getConsumptionsList(id) {
      //   console.log(id);
      // 获取支付方式
      let that = this;
      api.getConsumptions(id).then(response => {
        console.log(response.data.ConsumptionTotal);
        that.detailData = response.data.ConsumptionDetails;
        that.ConsumptionTotal = response.data.ConsumptionTotal;
        that.chargeTableData = [];
        that.addCharge();
      });
      // console.log(response.data.ConsumptionDetails);
    },
    getZffsList() {
      // 获取支付方式
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID
      };
      api.getAllPayModelInfoSupportCertain(data).then(response => {
        console.log(response.data);
        if (response.error_code === "Success") {
          let res = response.data;
          that.volumeTypes = res.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    formatData(num) {
      // 四舍五入数据
      let that = this;
      let n = parseInt(num * 100 + 0.5) / 100;
      return n;
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      // 判断页面
      that.checkAuthor();
      that.getZffsList();
      that.getList();
    });
  },
  filters: {
    formatMoney(val) {
      if (!val) {
        return 0.0;
      }
      return Number(val).toFixed(2);
    }
  }
};
</script>
<style>
.dialog .ivu-modal-body {
}
</style>