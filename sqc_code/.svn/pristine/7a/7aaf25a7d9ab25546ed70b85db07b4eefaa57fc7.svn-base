<template>
  <div class="khgl-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent class="search-form" ref="searchForm">
        <row :gutter="20">
          <i-col span="3">
            <formItem prop="startDate">

              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="开始日期" v-model="formItem.startDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <formItem prop="endDate">

              <DatePicker class="DatePicker_time" type="date" :options="options1" placeholder="结束日期" v-model="formItem.endDate" :clearable="false" :editable="false"></DatePicker>
            </formItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="userName">
              <Input v-model="formItem.userName" placeholder="姓名"></Input>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="userTel">
              <Input v-model="formItem.userTel" placeholder="电话"></Input>
            </FormItem>
          </i-col>
          <i-col span="12">
            <formItem class="btn-box">
              <Button type="primary" class="btn" @click="searchForm">搜索</Button>
              <Button type="warning" class="btn" @click="resetSearch">重置</Button>
              <i-button type="primary" class="btn btn-add" @click="showAddPoup" v-if="showAdd">添加</i-button>
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>
    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" :height="setTableHeight" ref="mainTable" highlight-row></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
        <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
      </Select>
      <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
      <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
      <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
      <div class="page-box">
        <p>前往</p>
        <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
        <p>页</p>
      </div>
    </div>
    <!-- 新增弹窗 -->
    <Modal :mask-closable="false" v-model="modal1" class="dialog" v-if="showAdd">
      <div slot='header' class="header">
        {{modalTitle}}
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <FormItem prop="CustomerName" label="客户姓名：" :rules="formValidateRule.CustomerName">
          <Input v-model="formValidate.CustomerName" disabled></Input>
        </FormItem>
        <FormItem prop="CustomerPhone" label="电话：" :rules="formValidateRule.CustomerPhone">
          <Input v-model="formValidate.CustomerPhone" disabled></Input>
        </FormItem>
        <FormItem label="原所属门店：" prop="oldStore">
          <Input v-model="formValidate.oldStore" disabled></Input>
        </FormItem>
        <FormItem label="选择区域：" prop="areaID" :rules="formValidateRule.areaID">
          <Select v-model="formValidate.areaID" :filterable="true" @on-change="QYchange">
            <Option v-for="item in areaList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
          </Select>
        </FormItem>
        <FormItem label="现所属门店：" prop="newStoreID" :rules="formValidateRule.newStoreID">
          <Select v-model="formValidate.newStoreID" :filterable="true">
            <Option v-for="item in storeList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
          </Select>
        </FormItem>
        <FormItem label="备注：" prop="Remark">
          <Input v-model="formValidate.Remark" placeholder="备注" type="textarea"></Input>
        </FormItem>
      </Form>
      <div slot="footer" class="footer">
        <Button type="primary" class="btn" @click="addForm" :loading="loading">保存</Button>
        <Button type="warning" class="btn" @click="resetAdd" :loading="loading">取消</Button>
      </div>
    </Modal>
    <!-- 查询电话号码弹窗 -->
    <Modal :mask-closable="false" v-model="poupSearchTel" class="dialog" class-name="vertical-center-modal">
      <div slot='header' class="header">
        请输入电话号码
      </div>
      <Form :model="searchTel" ref="searchTelForm" @submit.native.prevent="searchCustomerTel">
        <Form-item prop="tel" :rules="searchRule.tel">
          <i-input v-model="searchTel.tel" placeholder="请输入用户的手机号" autofocus ref="searchTel"></i-input>
        </Form-item>
      </Form>
      <div slot='footer' class="footer">
        <i-button type="primary" class="btn" @click="searchCustomerTel" :loading="loading">确定</i-button>
        <i-button type="warning" class="btn" @click="searchReset">取消</i-button>
      </div>
    </Modal>
  </div>
</template>
<script>
import api from "@/api/index.js";
import manager from "@/api/manager.js";
import { mapState } from "vuex";
import moment from "moment";
export default {
  data() {
    const validateTel = (rule, value, callback) => {
      let reg = /^1\d{10}$/;
      // console.log("reg.test(value)", reg.test(value));
      if (value === "") {
        callback(new Error("手机号不得为空"));
      } else if (!reg.test(value)) {
        callback(new Error("请输入正确的手机号"));
      } else {
        callback();
      }
    };
    return {
      //时间回到今天
      options1: {
        shortcuts: [
          {
            text: "今天",
            value() {
              return new Date();
            }
          }
        ]
      },
      // -----
      showAdd: false,
      tableLoading: false,
      loading: false,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      tableHeight: 200,
      poupSearchTel: false,
      searchTel: {
        tel: ""
      },
      searchRule: {
        tel: {
          required: true,
          message: "请输入正确的手机号码",
          trigger: "blur",
          type: "number",
          validator: validateTel
        }
      },
      modalTitle: "新增",
      phone: "",
      modal1: false,
      formValidate: {
        CustomerID: "",
        CustomerName: "",
        CustomerPhone: "",
        oldStoreID: "",
        newStoreID: "",
        Remark: "",
        areaID: ""
      },
      formValidateRule: {
        name: {
          required: true,
          message: "姓名不得为空",
          trigger: "blur"
        },
        newStoreID: {
          required: true,
          message: "现所属门店不得为空",
          trigger: "blur"
        },
        Remark: {
          required: true,
          message: "备注不得为空",
          trigger: "blur"
        }
      },
      formItem: {
        startDate: new Date(),
        endDate: new Date(),
        userName: "",
        userTel: ""
      },
      columns1: [
        {
          title: "登记日期",
          key: "Date",
          align: "center",
          render: (h, params) => {
            if (!params.row.Date) {
              return "";
            }
            return h(
              "div",
              {},
              moment(params.row.Date).format("YYYY-MM-DD HH:mm:ss")
            );
          }
        },
        {
          title: "电话",
          key: "CustomerPhone",
          align: "center"
        },
        {
          title: "客户姓名",
          key: "CustomerName",
          align: "center"
        },
        {
          title: "原所属门店",
          key: "OldStoreName",
          align: "center"
        },
        {
          title: "新所属门店",
          key: "NewStoreName",
          align: "center"
        },
        {
          title: "经手人",
          key: "HandleByName",
          align: "center"
        },
        {
          title: "备注",
          key: "Remark",
          align: "center",
          render: (h, parmas) => {
            if (!parmas.row.Remark) {
              return "";
            }
            let text =
              parmas.row.Remark.length > 8
                ? parmas.row.Remark.substr(0, 7) + "..."
                : parmas.row.Remark;
            return h(
              "div",
              {
                on: {
                  click: () => {
                    this.$Modal.success({
                      title: "提示",
                      content: parmas.row.Remark
                    });
                  }
                }
              },
              text
            );
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      list: [],
      storeList: [],
      areaList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      authorList: state => state.app.authorList,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    }
  },
  methods: {
    showAddPoup() {
      let that = this;
      that.$refs.searchTelForm.resetFields();
      that.poupSearchTel = true;
      that.$nextTick(() => {
        that.$refs.searchTel.focus();
      });
    },
    showAddFunc() {
      // 判断用户是否有查看客户详情权限
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "增加") {
            that.showAdd = i.IsVisible;
          }
        }
      }
    },
    searchForm() {
      // 搜索表格
      let that = this;
      if (that.formItem.startDate && that.formItem.endDate) {
        // 两者同时存在
        if (Number(that.formItem.startDate) > Number(that.formItem.endDate)) {
          that.$Message.error("开始日期不得大于结束日期");
          return false;
        }
      }
      that.tablePage.page = 1;
      that.getList();
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    setData(res) {
      let that = this;
      that.formValidate.CustomerID = res.ID;
      that.formValidate.CustomerName = res.Name;
      that.formValidate.CustomerAge = res.Age;
      that.formValidate.CustomerPhone = res.Phone;
      that.formValidate.oldStore = res.StoreName;
    },
    searchCustomerTel() {
      let that = this;
      that.$refs.searchTelForm.validate(validate => {
        if (validate) {
          // 搜索...
          let data = {
            CustomerPhone: that.searchTel.tel
          };
          that.loading = true;
          api.getCustomerByPhoneApply(data).then(response => {
            let a = {
              Name: "",
              Age: "",
              Phone: data.CustomerPhone,
              CustomerSex: ""
            };
            that.loading = false;
            if (response.error_code === "Success") {
              that.formValidate.CustomerID = response.data.ID;
              a = response.data;
              that.customerEnable = true;
              that.setData(a);
              that.poupSearchTel = false;
              that.modal1 = true;
              that.$refs.searchTelForm.resetFields();
              that.$route.params.phone = "";//清空路由带来的电话号码
            } else {
              // that.formValidate.CustomerID = ''
              // that.customerEnable = false
              that.$Message.error(response.error_message);
            }
          });
        } else {
          that.$Message.error("请输入用户的联系电话");
        }
      });
    },
    searchReset() {
      let that = this;
      that.$refs.searchTelForm.resetFields();
      that.poupSearchTel = false;
      that.$route.params.phone = "";//清空路由带来的电话号码
    },
    modefyMessage(row) {
      let that = this;
      /*
                 * 修改用户信息 todo
                 */
      that.modal1 = true;
      that.modalTitle = "修改";
    },
    resetAdd() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    addForm() {
      let that = this;
      that.$refs.formValidate1.validate(validate => {
        if (validate) {
          that.loading = true;
          let data = {
            EmployeeID: that.userMes.EmployeeID,
            CustomerID: that.formValidate.CustomerID,
            NewStoreID: that.formValidate.newStoreID,
            Remark: that.formValidate.Remark
          };
          manager.addCustomerTransfer(data).then(response => {
            that.loading = false;
            if (response.error_code === "Success") {
              that.$Message.success("操作成功");
              that.resetForm();
              that.getList();
            } else {
              this.$Message.error(response.error_message);
            }
          });
        } else {
          this.$Message.error("有必填项为空");
        }
      });
    },
    QYchange(val) {
      let that = this;
      that.getStoreList();
    },
    getQYList() {
      // 获取区域下拉
      let that = this;
      api.GetAllCityInfo().then(response => {
        if (response.error_code === "Success") {
          that.areaList = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getStoreList() {
      let that = this;
      let listCity = [];
      listCity.push(that.formValidate.areaID);
      let data = {
        listCity: listCity
      };
      api.getStoreInfoCity(data).then(response => {
        if (response.error_code === "Success") {
          that.storeList = response.data.list;
        } else {
          this.$Message.error(response.error_message);
        }
      });
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      let data = {
        EmployeeID: that.userMes.EmployeeID,
        startDate: that.formItem.startDate,
        endDate: that.formItem.endDate,
        CustomerName: that.formItem.userName,
        CustomerPhone: that.formItem.userTel,
        page: that.tablePage.page,
        size: that.tablePage.pageNum
      };
      // 转换日期
      if (data.startDate) {
        data.startDate = moment(data.startDate).format("YYYY-MM-DD");
      }
      if (data.endDate) {
        data.endDate = moment(data.endDate).format("YYYY-MM-DD");
      }
      if (data.CustomerPhone) {
        let regex = /^1\d{10}$/;
        if (!regex.test(data.CustomerPhone)) {
          that.$Message.error("电话号码格式有误");
          return false;
        }
      }
      that.tableLoading = true;
      manager.getCustomerTransferList(data).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          for (let i of res.list) {
            let phone = i.CustomerPhone;
            i.CustomerPhone =
              phone.substring(0, 3) + "****" + phone.substr(phone.length - 4);
          }
          that.list = res.list;
          that.tableLoading = false;
          that.page = res.page;
          that.tablePage.allNum = res.total;
          that.tablePage.maxPageNum = res.totalPage;
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.showAddFunc();
      that.initTableHeight();
      that.getList();
      // that.getStoreList();
      that.getQYList();
    });
  },
  activated() {
    let that = this;
    that.$nextTick(() => {
      let phone = that.$route.params.phone;
      if (phone) {
        // 快捷菜单
        that.searchTel.tel = phone;
        that.poupSearchTel = true;
        // that.$store.commit('changeLoadingPage')
        // setTimeout(() => {
        //   that.searchCustomerTel();
        // }, 300);
      }
    });
  }
};
</script>
<style>
</style>