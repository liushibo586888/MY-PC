<template>
    <div class="zfmx-container container">
        <div class="search-box">
            <Form :model="formItem" :label-width="0" inline @submit.native.prevent ref="searchForm" class="search-form">
                <row :gutter="20">
                    <i-col span="3">
                        <formItem prop="StartDate">
                            <DatePicker type="date" placeholder="开始日期" v-model="formItem.StartDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col>
                    <i-col span="3">
                        <formItem prop="EndDate">
                            <DatePicker type="date" placeholder="结束日期" v-model="formItem.EndDate" :clearable="false" :editable="false"></DatePicker>
                        </formItem>
                    </i-col>
                    <i-col span="3">
                        <FormItem prop="customerName">
                            <Input v-model="formItem.customerName" placeholder="入库单号"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="15">
                        <formItem class="btn-box">
                            <Button type="primary" class="btn btn-search" @click="tianjia">添加</Button>
                            <Button type="primary" class="btn btn-search" @click="searchForm">搜索</Button>
                            <Button type="warning" class="btn btn-reset" @click="resetSearch">重置</Button>
                        </formItem>
                    </i-col>
                </row>
            </Form>
        </div>
        <div class="table-box" id="tableBox">
            <Table :columns="columns1" :data="list" highlight-row :height="setTableHeight" ref="mainTable"></Table>
            <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
        </div>

        <!-- 弹窗 -->
        <Modal :mask-closable="false" v-model="modal1" width="1000" :scrollable="true" class="dialog" v-if="showAdd">
            <div slot='header' class="header not-print">
                新增入库单
            </div>
            <div slot='close' class="close not-print">
                <i class='ivu-icon ivu-icon-aaa-guanbi'></i>
            </div>
            <!-- 用户信息部分 不可修改 -->
            <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
                <row type="flex" justify="space-between">
                    <i-col span="6">
                        <FormItem prop="CustomerName" label="入库单编号：">
                            <Input v-model="formValidate.CustomerName" placeholder="无"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem prop="CustomerPhone" label="入库单类型：">
                            <Input v-model="formValidate.CustomerPhone" placeholder="无"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem label="关联订单号：" prop="CustomerAge">
                            <Input v-model="formValidate.CustomerAge" placeholder="无"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem prop="CustomerSex" label="制单人：">
                            <Input v-model="formValidate.CustomerSex" placeholder="无"></Input>
                        </FormItem>
                    </i-col>
                </row>
                <row type="flex" justify="space-between">
                    <i-col span="6">
                        <FormItem label="供应商编号：" prop="CashBalance">
                            <Input v-model="formValidate.CashBalance" placeholder="无" style="width:100%;"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem label="供应商名称：" prop="IntegrationBalance">
                            <Input v-model="formValidate.IntegrationBalance" placeholder="无" style="width:100%;"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem label="供应商联系人：" prop="ArrearsBalance">
                            <Input v-model="formValidate.ArrearsBalance" placeholder="无" style="width:100%;"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem label="供应商联系方式：" prop="HandselBalance">
                            <Input v-model="formValidate.HandselBalance" placeholder="无" style="width:100%;"></Input>
                        </FormItem>
                    </i-col>
                </row>
                <row type="flex">
                    <i-col span="6">
                        <FormItem label="制单时间：" prop="SceneEmployeeName">
                            <Input v-model="formValidate.SceneEmployeeName" placeholder="无"></Input>
                        </FormItem>
                    </i-col>
                    <i-col span="6">
                        <FormItem label="过期时间：" prop="TMKEMployeeName">
                            <Input v-model="formValidate.TMKEMployeeName" placeholder="无"></Input>
                        </FormItem>
                    </i-col>

                    <i-col span="6">
                        <FormItem label="选择库位：" prop="BeauticianID">
                            <Select v-model="formValidate.BeauticianID" :filterable="true" placeholder="请选择">
                                <!-- <Option :value="item.ID" v-for="(item, index) in mrsList" :key="index" @click.native="chooseBeautician(item.Name,item.ID)">{{item.Name}}</Option> -->
                            </Select>
                        </FormItem>

                    </i-col>
                </row>
                <!-- ** -->
            </Form>
            <!-- 确诊单明细 -->
            <div class="pannel-title">
                <p>物资/项目列表</p>
                <div>
                    <i-button type="text" size="small" style="width: auto; height: auto;">添加项目</i-button>/
                    <i-button type="text" size="small" style="width: auto; height: auto;">添加物资</i-button>
                </div>
            </div>

            <Input placeholder="备注" type="textarea" :rows="4"></Input>
            <!-- ** -->
            <div slot="footer" class="footer not-print">
                <Button class="btn" type="primary" :loading="onLoading">保存</Button>
                <Button class="btn" type="warning" @click="resetForm" :loading="onLoading">取消</Button>
            </div>
        </Modal>

        <div class="bottom-box">
            <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
            <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
                <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
            </Select>

            <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
            <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
            <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
            <div class="page-box">
                <p>前往</p>
                <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
                <p>页</p>
            </div>
        </div>
    </div>
</template>
<script>
import api from "@/api/index.js";
import { mapState } from "vuex";
import moment from "moment";
export default {
  data() {
    return {
      modal1: false,
      onLoading: false,
      showAdd: false,
      tableLoading: true,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      tableHeight: 40,
      formValidate: {
        BeauticianID: "",
        CustomerPhone: "",
        CustomerName: "",
        CustomerAge: "",
        CustomerSex: "",
        TMKEMployeeName: "",
        Nurse: "",
        SceneEmployeeName: "",
        ArrearsBalance: "",
        HandselBalance: "",
        CashBalance: "",
        IntegrationBalance: "",
        HandleBy: "",
        Remark: ""
      },
      formItem: {
        customerName: "",
        StartDate: new Date(),
        EndDate: new Date(),
        store: "all",
        StoreID: null,
        EmployeeID: "",
        page: "",
        size: ""
      },
      columns1: [
        {
          title: "创建时间",
          key: "Date",
          align: "center",
          width: 120,
          render: (h, params) => {
            if (!params.row.Date) {
              return h("div", {}, "");
            }
            return h("div", {}, moment(params.row.Date).format("YYYY-MM-DD"));
          }
        },
        {
          title: "入库单号",
          key: "CustomerName",
          align: "center",
          width: 100
        },
        {
          title: "入库类型",
          key: "StoreName",
          align: "center",
          width: 150
        },
        {
          title: "供应商",
          key: "DocType",
          align: "center",
          width: 120
        },
        {
          title: "关联单号",
          key: "ItemCategoryName",
          align: "center",
          width: 100
        },
        {
          title: "货品总数",
          key: "ItemTopCategoryName",
          align: "center",
          width: 100
        },
        {
          title: "总金额",
          key: "ItemStandard",
          align: "center",
          width: 100
        },
        {
          title: "状态",
          key: "ItemUnit",
          align: "center",
          width: 100
        },
        {
          title: "制单人",
          key: "ChargeByName",
          align: "center",
          width: 100
        },
        {
          title: "操作方式",
          key: "PayModeName",
          align: "center",
          width: 180
        },
        {
          title: " ",
          key: "",
          align: "center"
        }
      ],
      list: [],
      storeList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    }
  },
  methods: {
    tianjia() {
      let that = this;
      that.showAdd = true;
      that.modal1 = true;
    },
    resetForm() {
      let that = this;
      that.formValidate.Remark = "";
      that.$refs.formValidate1.resetFields();
      that.showAdd = false;
    },
    searchForm() {
      // 搜索表格
      let that = this;
      // 两者同时存在
      if (Number(that.formItem.StartDate) > Number(that.formItem.EndDate)) {
        that.$Message.error("开始日期不得大于结束日期");
        return false;
      }
      that.tablePage.page = 1;
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.modal1 = false;
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      let userMessage = JSON.parse(localStorage.userMessage);
      that.formItem.EmployeeID = userMessage.EmployeeID;
      that.formItem.page = that.tablePage.page;
      that.formItem.size = that.tablePage.pageNum;
      let data = that.formItem;
      if (data.StartDate) {
        data.StartDate = moment(data.StartDate).format("YYYY-MM-DD");
        that.formItem.StartDate = data.StartDate;
      }
      if (data.EndDate) {
        data.EndDate = moment(data.EndDate).format("YYYY-MM-DD");
        that.formItem.EndDate = data.EndDate;
      }
      that.tableLoading = true;
      api.paymentSchedule(that.formItem).then(response => {
        if (response.error_code === "Success") {
          let res = response.data;
          that.list = res.list;
          that.tableLoading = false;
          that.page = res.page;
          that.tablePage.allNum = res.total;
          that.tablePage.maxPageNum = res.totalPage;
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
    });
  }
};
</script>
<style>
</style>

