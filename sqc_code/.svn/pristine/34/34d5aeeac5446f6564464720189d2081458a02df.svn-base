
<template>
  <div class="QYbox">
    <div class='canvasTitle'>项目分类成交率</div>
    <tableLoadingPage :loading="spinShow"></tableLoadingPage>
    <div id="data_source_com"></div>
  </div>
</template>
<script>
import moment from 'moment';
import { mapState } from 'vuex';
import api from '@/api/index.js';
import echarts from 'echarts';
import echartsCommon from '@/api/Common.js';
export default {
  props: [
    'date',
    'vall',
    'startDate',
    'endDate',
    'sCity',
    'MDid',
    'choosedItemList',
    'storeList',
    'ItemId',
  ],
  data() {
    return {
      spinShow: true,
    };
  },
  computed: {
    ...mapState({
      userMes: (state) => state.app.userMes,
      authorList: (state) => state.app.authorList,
      tableRows: (state) => state.app.tableRows,
    }),
  },
  methods: {
    getList() {
      setTimeout(() => {
        let that = this;
        let data = {
          reportType: that.vall,
          startDate: that.startDate,
          endDate: that.endDate,
          areaID: that.sCity,
          storeId: that.MDid,
          employeeId: that.userMes.EmployeeID,
          ItemId: that.ItemId,
          ListModels: that.choosedItemList,
        };
        data.startDate = moment(that.startDate).format('YYYY-MM-DD');
        data.endDate = moment(that.endDate).format('YYYY-MM-DD');
        let temp = JSON.parse(JSON.stringify(data));
        if (that.vall == 4) {
          temp.areaID = '1';
          temp.reportType = 2;
          let arr = that.storeList;
          arr.forEach((v) => {
            temp.ListModels.push({
              startDate: temp.startDate,
              endDate: temp.endDate,
              areaID: v.ID,
              storeId: that.MDid,
            });
          });
        }
        temp.ListModels.forEach((x) => delete x.arr);
        that.spinShow = true;
        api.AreaNewCustomerItemReport(temp).then((response) => {
          if (response.error_code === 'Success') {
            that.list = response.data;
            that.setPieData();
          } else {
            that.$Message.error(response.error_message);
          }
        });
      }, 300);
    },
    setPieData() {
      let that = this;
      let CustNumData = [];
      let DealCustNumData = [];
      let DealRateData = [];
      let NameData = [];
      for (let i in that.list) {
        if (that.list[i].Rate == 'NaN') {
          that.list[i].Rate = 0;
        }
        let a = {
          CustNum: that.list[i].ItemTotalNum,
          DealCustNum: that.list[i].SuccessNum,
          DealRate: that.list[i].Rate.toFixed(2),
          Name: that.list[i].StoreName,
        };
        CustNumData.push(a.CustNum);
        DealCustNumData.push(a.DealCustNum);
        DealRateData.push(a.DealRate);
        NameData.push(a.Name);
      }
      that.max = CustNumData[0];
      that.setEcharts(CustNumData, DealCustNumData, DealRateData, NameData);
    },
    setEcharts(CustNumData, DealCustNumData, DealRateData, NameData) {
      let that = this;
      that.$nextTick(() => {
        var dataSourcePie = echarts.init(
          document.getElementById('data_source_com')
        );
        let optionPie = {
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'cross',
              crossStyle: {
                color: '#999',
              },
            },
          },
          toolbox: {
            feature: {
              dataView: { show: true, readOnly: false },
              magicType: { show: true, type: ['line', 'bar'] },
              restore: { show: true },
              saveAsImage: { show: true },
            },
          },
          legend: {
            data: ['人数', '成交人数', '成交率'],
          },
          xAxis: [
            {
              type: 'category',
              data: NameData,
              axisPointer: {
                type: 'shadow',
              },
            },
          ],
          yAxis: [
            {
              type: 'value',
              name: '人数',
              min: 0,
              max: this.max,
              // interval: 10,
              axisLabel: {
                formatter: '{value}',
              },
            },
            {
              type: 'value',
              name: '成交率',
              min: 0,
              max: 100,
              interval: 10,
              axisLabel: {
                formatter: '{value} %',
              },
            },
          ],
          series: [
            {
              name: '人数',
              type: 'bar',
              data: CustNumData,
              itemStyle: echartsCommon.itemStyle(10),
            },
            {
              name: '成交人数',
              type: 'bar',
              data: DealCustNumData,
              itemStyle: echartsCommon.itemStyle(10),
            },
            {
              name: '成交率',
              type: 'line',
              yAxisIndex: 1,
              data: DealRateData,
              itemStyle: echartsCommon.itemStyle(10),
            },
          ],
        };
        var opt = optionPie.series;
        dataSourcePie.setOption(optionPie, true);
        that.spinShow = false;
        window.addEventListener('resize', function () {
          dataSourcePie.resize();
        });
      });
    },
  },
  mounted() {
    let that = this;
    that.getList();
  },
  watch: {
    startDate(val1, oldVal1) {
      this.getList();
    },
    endDate(val2, oldVal2) {
      this.getList();
    },
    sCity(val3, oldVal3) {
      this.getList();
    },
    MDid(val4, oldVal4) {
      this.getList();
    },
    choosedItemList(val5, oldVal5) {
      this.getList();
    },
    date(val6, oldVal6) {
      this.getList();
    },
    ItemId(val7, oldVal7) {
      this.getList();
    },
  },
};
</script>
<style scoped>
.canvasTitle {
  font-size: 20px;
  font-weight: bold;
}
#data_source_com {
  height: 70vh;
}
</style>


