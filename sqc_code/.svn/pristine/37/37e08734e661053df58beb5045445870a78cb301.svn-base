<template>
  <div class="yggl-container container">
    <div class="search-box">
      <Form :model="formItem" :label-width="0" inline @submit.native.prevent class="search-form" ref="searchForm">
        <row :gutter="20">
          <!-- 职位名称 -->
          <i-col span="3">
            <FormItem prop="Name">
              <Input v-model="formItem.Name" placeholder="员工姓名"></Input>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="DepartmentName">
              <Select v-model="formItem.DepartmentName" placeholder="部门">
                <Option value="">全部</Option>
                <Option :value="item.ID" v-for="(item, index) in departmentsList" :key="index">{{item.Name}}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="store">
              <Select v-model="formItem.city" placeholder="区域" :filterable="true">
                <Option value="all" @click.native="choose()">所有区域</Option>
                <Option v-for="item in cityList" :value="item.Name" :key="item.ID" @click.native="choose(item.Name,item.ID)">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="store">
              <Select v-model="formItem.store" placeholder="门店" :filterable="true">
                <Option value="all" @click.native="choose()">所有门店</Option>
                <Option v-for="item in storeList" :value="item.Name" :key="item.ID" @click.native="choose(item.Name,item.ID)">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="3">
            <FormItem prop="Valid">
              <Select v-model="formItem.Valid" placeholder="是否有效" :filterable="true">
                <Option value="是">是</Option>
                <Option value="否">否</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="9">
            <formItem class="btn-box">
              <Button type="primary" class="btn" @click="searchList">搜索</Button>
              <Button type="warning" class="btn" @click="resetSearch">重置</Button>
              <i-button type="primary" class="btn btn-add" @click="showAddPoup" v-if="setAuthorAdd">添加</i-button>
              <i-button type="primary" class="btn btn-purple" @click="getDetail" v-if="setAuthorEdit" :disabled="!rowID">修改</i-button>
            </formItem>
          </i-col>
        </row>
      </Form>
    </div>
    <div class="table-box" id="tableBox">
      <Table :columns="columns1" :data="list" :height="setTableHeight" highlight-row ref="mainTable" @on-current-change="getRowID"></Table>
      <tableLoadingPage :loading="tableLoading"></tableLoadingPage>
    </div>
    <div class="bottom-box">
      <i-button class="btn-export" @click="exportTable" type="default">导出</i-button>
      <Select v-model="tablePage.pageNum" class="table-row" placement="top" @on-change="changePage">
        <Option :value="item.ID" v-for="(item, index) in tableRows" :key="index">{{item.Name}}</Option>
      </Select>
      <div class="row-box">{{tablePage.startNum}} - {{tablePage.endNum}}条/共{{tablePage.allNum}}条</div>
      <i-button class="btn btn-prev" type="ghost" @click="prevPage()">上一页</i-button>
      <i-button class="btn btn-next" type="primary" @click="nextPage()">下一页</i-button>
      <div class="page-box">
        <p>前往</p>
        <Input-number :max="tablePage.maxPageNum" :min="1" v-model="tablePage.page" @on-change="changePage"></Input-number>
        <p>页</p>
      </div>
    </div>
    <!-- 新增弹窗 -->
    <Modal :mask-closable="false" v-model="modal1" class="dialog" :width="1000" v-if="setAuthorAdd || setAuthorEdit">
      <div slot='header' class="header">
        {{modalTitle}}
      </div>
      <Form ref="formValidate1" :model="formValidate" :label-width="120" @submit.native.prevent class="form">
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Image" label="员工照片：" :label-width="120">
              <div class="input-box">
                <div style="position:absolute;right:-10px;top:-10px; z-index:99;" @click="formValidate.Image = ''" v-if="formValidate.Image">
                  <Icon type="close-circled" style="font-size:20px;color:#666;"></Icon>
                </div>
                <img :src="formValidate.Image" v-if="formValidate.Image">
                <Icon type="camera" v-else class="icon-camera"></Icon>
                <input type="file" accept="image/gif,image/jpeg,image/jpg,image/png,image/svg" @change="uploadImg" ref="image">
              </div>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Name" label="员工姓名：" :rules="formValidateRule.Name">
              <Input v-model="formValidate.Name" placeholder="请输入"></Input>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="DepartmentID" label="部门：" :rules="formValidateRule.DepartmentID">
              <Select v-model="formValidate.DepartmentID" @on-change="getPosList">
                <Option v-for="item in departmentsList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="PositionID" label="职位：" :rules="formValidateRule.PositionID">
              <Select v-model="formValidate.PositionID" @on-change="changePositionID">
                <Option v-for="item in jobList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="Sex" label="性别：" :rules="formValidateRule.Sex">
              <Select v-model="formValidate.Sex">
                <Option value="男">男</Option>
                <Option value="女">女</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Phone" label="电话：">
              <!-- <FormItem prop="Phone" label="电话："  :rules="formValidateRule.Phone"> -->
              <Input v-model="formValidate.Phone" placeholder="请输入"></Input>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="IDCardNumber" label="身份证：">
              <!-- <FormItem prop="IDCardNumber" label="身份证："  :rules="formValidateRule.IDCardNumber"> -->
              <Input v-model="formValidate.IDCardNumber" placeholder="请输入"></Input>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Birthday" label="生日：">
              <DatePicker type="date" placeholder="请选择" style="width:100%;" v-model="formValidate.Birthday"></DatePicker>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="UserName" label="登录账号：" :rules="formValidateRule.UserName">
              <Input v-model="formValidate.UserName" placeholder="请输入"></Input>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="Password" label="登录密码：" :rules="formValidateRule.Password" v-if="modalTitle == '新建'">
              <Input v-model="formValidate.Password" placeholder="请输入"></Input>
            </FormItem>
            <FormItem prop="Password" label="登录密码：" v-show="modalTitle != '新建'">
              <Input v-model="formValidate.Password" placeholder="请输入"></Input>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="StoreID" label="所属门店：" :rules="formValidateRule.StoreID" v-if="storeList">
              <Select v-model="formValidate.StoreID">
                <!-- :disabled="!canEditStore" -->
                <Option v-for="item in storeList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="11">
            <FormItem prop="IsConsultation" label="是否接诊：" :rules="formValidateRule.IsConsultation">
              <RadioGroup v-model="formValidate.IsConsultation">
                <Radio :label="1">
                  <span>是</span>
                </Radio>
                <Radio :label="0">
                  <span>否</span>
                </Radio>
              </RadioGroup>
            </FormItem>
          </i-col>
          <i-col span="11">
            <FormItem prop="Valid" label="是否有效：" :rules="formValidateRule.Valid">
              <RadioGroup v-model="formValidate.Valid">
                <Radio :label="1">
                  <span>是</span>
                </Radio>
                <Radio :label="0">
                  <span>否</span>
                </Radio>
              </RadioGroup>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="quyuXZ" label="控制区域：" :label-width="120" :rules="formValidateRule.quyuXZ">
              <Select v-model="formValidate.quyuXZ" multiple @on-change="getArealsList()">
                <Option v-for="item in quYuList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="quyuXZMD" label="控制门店：" :label-width="120" :rules="formValidateRule.quyuXZMD">
              <Select v-model="formValidate.quyuXZMD" multiple>
                <Option v-for="item in quYuMenDList" :value="item.ID" :key="item.ID">{{ item.Name }}</Option>
              </Select>
            </FormItem>
          </i-col>
        </row>
        <row type="flex" justify="space-between">
          <i-col span="24">
            <FormItem prop="Remark" label="备注：" :rules="formValidateRule.Remark">
              <Input v-model="formValidate.Remark" placeholder="请输入" type="textarea" :rows="4"></Input>
            </FormItem>
          </i-col>
        </row>
      </Form>
      <div slot="footer" class="footer">
        <Button type="primary" class="btn" @click="addForm" :loading="loading">保存</Button>
        <Button type="warning" class="btn" @click="resetForm" :loading="loading">取消</Button>
      </div>
    </Modal>
    <!-- ** -->
  </div>
</template>
<script>
import Exif from "exif-js";
import api from "@/api/index.js";
import manager from "@/api/manager.js";
import { mapState } from "vuex";
import moment from "moment";
export default {
  data() {
    const cardID = (rule, value, callback) => {
      let reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
      if (value === "") {
        callback(new Error("身份号不得为1空"));
      } else if (!reg.test(value)) {
        callback(new Error("身份证号格式有误"));
      } else {
        callback();
      }
    };
    const validateTel = (rule, value, callback) => {
      let reg = /^1\d{10}$/;
      if (value === "") {
        callback(new Error("手机号不得为空"));
      } else if (!reg.test(value)) {
        callback(new Error("请输入正确的手机号"));
      } else {
        callback();
      }
    };
    return {
      yinC: false,
      sCityId: "",
      isGroupDepart: false,
      canEditStore: true,
      tableLoading: false,
      loading: false,
      tablePage: {
        page: 1,
        pageNum: 10,
        maxPageNum: 100,
        allNum: 199,
        startNum: 0,
        endNum: 0
      },
      rowID: null,
      tableHeight: 200,
      modalTitle: "修改",
      phone: "",
      modal1: false,
      // 添加弹窗用
      formValidate: {
        Image: "",
        ID: "",
        Name: "",
        DepartmentID: "",
        PositionID: "",
        Sex: "女",
        Phone: "",
        IDCardNumber: "",
        UserName: "",
        Password: "123456",
        Valid: 1,
        IsConsultation: 1,
        StoreID: "",
        Remark: "",
        Birthday: "",
        quyuXZ: [],
        quyuXZMD: []
      },
      formValidateRule: {
        Name: { required: true, message: "员工姓名不得为空", trigger: "blur" },
        DepartmentID: {
          required: true,
          message: "部门不得为空",
          trigger: "blur"
        },
        PositionID: {
          required: true,
          message: "职位不得为空",
          trigger: "blur"
        },
        Sex: { required: true, message: "性别不得为空", trigger: "blur" },
        UserName: {
          required: true,
          message: "登录账号不得为空",
          trigger: "blur"
        },
        Password: {
          required: true,
          message: "登录密码不得为空",
          trigger: "blur"
        },
        Valid: {
          required: true,
          message: "是否有效不得为空",
          trigger: "blur",
          type: "number"
        },
        IsConsultation: {
          required: true,
          message: "是否接诊不得为空",
          trigger: "blur",
          type: "number"
        },
        StoreID: {
          required: true,
          message: "所属门店不得为空",
          trigger: "blur"
        },
        IDCardNumber: {
          required: true,
          message: "身份证不得为空",
          trigger: "blur"
        },
        Phone: {
          required: true,
          message: "电话不得为空",
          trigger: "blur",
          validator: validateTel
        }
      },
      formItem: {
        Name: "",
        DepartmentName: "",
        store: "all",
        StoreID: "",
        Valid: "",
        city: "",
        area: "",
        areaID: ""
      },
      columns1: [
        {
          title: "员工姓名",
          key: "Name",
          width: 150,
          align: "center"
        },
        {
          title: "部门",
          key: "DepartmentName",
          width: 160,
          align: "center"
        },
        {
          title: "职位",
          key: "PositionName",
          width: 160,
          align: "center"
        },
        {
          title: "性别",
          key: "Sex",
          width: 80,
          align: "center"
        },
        {
          title: "电话",
          key: "Phone",
          width: 140,
          align: "center"
        },
        {
          title: "身份证",
          key: "IDCardNumber",
          width: 200,
          align: "center"
        },
        {
          title: "生日",
          key: "Birthday",
          width: 140,
          align: "center",
          render: (h, params) => {
            if (!params.row.Birthday) {
              return h("div", {}, "无");
            }
            return h(
              "div",
              {},
              moment(params.row.Birthday).format("YYYY-MM-DD")
            );
          }
        },
        {
          title: "登录账号",
          key: "Account",
          width: 140,
          align: "center"
        },
        {
          title: "是否有效",
          key: "Valid",
          width: 100,
          align: "center",
          render: (h, parmas) => {
            let text = parmas.row.Valid ? "是" : "否";
            return h("div", {}, text);
          }
        },
        {
          title: "是否接诊",
          key: "IsConsultation",
          width: 100,
          align: "center",
          render: (h, parmas) => {
            let text = parmas.row.IsConsultation ? "是" : "否";
            return h("div", {}, text);
          }
        },
        {
          title: "所属门店",
          key: "StoreName",
          width: 140,
          align: "center"
        },
        {
          title: "备注",
          key: "Remark",
          width: 140,
          align: "center",
          render: (h, parmas) => {
            let text = parmas.row.Remark;
            if (text && text.length > 8) {
              text = text.substr(0, 7) + "...";
            }
            return h(
              "div",
              {
                on: {
                  click: () => {
                    this.showRemark(parmas.row.Remark);
                  }
                }
              },
              text
            );
          }
        },
        {
          title: " ",
          width: 10
        }
      ],
      getPosType: 0,
      list: [],
      departmentsList: [],
      storeList: [],
      jobList: [],
      cityList: [],
      quYuList: [],
      quYuMenDList: []
    };
  },
  computed: {
    ...mapState({
      userMes: state => state.app.userMes,
      authorList: state => state.app.authorList,
      tableRows: state => state.app.tableRows
    }),
    setTableHeight() {
      let that = this;
      return that.tableHeight;
    },
    setAuthorAdd() {
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "增加") {
            return i.IsVisible;
            break;
          }
        }
      }
      return false;
    },
    setAuthorEdit() {
      let that = this;
      let pageName = that.$route.name;
      let list = that.authorList[pageName];
      if (list) {
        for (let i of list) {
          if (i.Name === "修改") {
            return i.IsVisible;
            break;
          }
        }
      }
      return false;
    }
  },
  methods: {
    choose(name, id) {
      if (name === undefined && id === undefined) {
        this.formItem.store = "所有";
        this.formItem.StoreID = null;
      } else {
        this.formItem.store = name;
        this.formItem.StoreID = id;
      }
    },
    choose1(name, id) {
      let that = this;
      // if (name === undefined && id === undefined) {
      //   that.formItem.area = "所有";
      //   that.formItem.areaID = null;
      // } else {
      // that.formItem.area = name;
      that.formItem.areaID = id;
      // }
    },
    showAddPoup() {
      let that = this;
      that.resetForm();
      that.modal1 = true;
      that.modalTitle = "新建";
    },
    searchList() {
      let that = this;
      that.tablePage.page = 1;
      that.getList();
    },
    resetSearch() {
      let that = this;
      that.tablePage.page = 1;
      that.$refs.searchForm.resetFields();
      that.getList();
    },
    modefyMessage(data) {
      let that = this;
      manager
        .modefySingleEmployees(that.formValidate.ID, data)
        .then(response => {
          that.loading = false;
          if (response.error_code === "Success") {
            that.$Message.success("修改成功");
            that.resetForm();
            that.getList();
          } else {
            that.$Message.error(response.error_message);
          }
        });
    },
    resetForm() {
      let that = this;
      that.$refs.formValidate1.resetFields();
      that.$refs.image.value = "";
      that.getPosType = 0;
      that.formValidate.ID = "";
      that.formValidate.StoreID = null;
      that.jobList = [];
      that.storeList = [];
      that.canEditStore = true;
      that.modal1 = false;
      that.formValidate.quyuXZ = [];
      that.formValidate.quyuXZMD = [];
    },
    addForm() {
      let that = this;
      that.$refs.formValidate1.validate(validate => {
        if (validate) {
          let data = {
            Image: that.formValidate.Image,
            Name: that.formValidate.Name,
            DepartmentID: that.formValidate.DepartmentID,
            PositionID: that.formValidate.PositionID,
            Sex: that.formValidate.Sex,
            Phone: that.formValidate.Phone,
            IDCardNumber: that.formValidate.IDCardNumber,
            UserName: that.formValidate.UserName,
            Password: that.formValidate.Password,
            Valid: that.formValidate.Valid > 0 ? true : false,
            IsConsultation: that.formValidate.IsConsultation > 0 ? true : false,
            StoreID: that.isGroupDepart ? "" : that.formValidate.StoreID, // 集团部门没有门店
            Remark: that.formValidate.Remark,
            Birthday: that.formValidate.Birthday,
            powerModels: {
              Area: that.formValidate.quyuXZ,
              StoreIds: that.formValidate.quyuXZMD
            }
          };
          if (data.Birthday) {
            data.Birthday = moment(data.Birthday).format("YYYY-MM-DD");
          }
          that.loading = true;
          if (that.formValidate.ID) {
            that.modefyMessage(data);
            return false;
          }
          // let Area = that.formValidate.quyuXZ;
          // let StoreIds = that.formValidate.quyuXZMD;
          // let arr1 = [];
          // let arr2 = [];
          // for (let i = 0; i < Area.length; i++) {
          //   let a = {
          //     Area: Area[i]
          //   };
          //   arr1.push(a);
          // }
          // data.Area = arr1;
          // for (let i = 0; i < StoreIds.length; i++) {
          //   let b = {
          //     StoreIds: StoreIds[i]
          //   };
          //   arr2.push(b);
          // }
          // data.StoreIds = arr2;

          console.log(data);
          // console.log(data.StoreIds);
          // that.loading = false;
          // return;
          manager.addEmployees(data).then(response => {
            that.loading = false;
            if (response.error_code === "Success") {
              that.$Message.success("添加成功");
              that.resetForm();
              that.getList();
            } else {
              that.$Message.error(response.error_message);
            }
          });
        } else {
          this.$Message.error("有必填项为空");
        }
      });
    },
    initTableHeight() {
      let that = this;
      that.tableHeight = document.getElementById("tableBox").offsetHeight;
      window.onresize = function() {
        that.tableHeight = document.getElementById("tableBox").offsetHeight;
      };
    },
    setPage() {
      let that = this;
      let teblePage = that.tablePage;
      teblePage.startNum = teblePage.pageNum * (teblePage.page - 1) + 1;
      let endPage = teblePage.page * teblePage.pageNum;
      teblePage.endNum =
        endPage > teblePage.allNum ? teblePage.allNum : endPage;
    },
    prevPage() {
      let that = this;
      if (that.tablePage.page <= 1) {
        that.$Message.error("已经是第一页");
        return false;
      }
      that.tablePage.page--;
      that.getList();
    },
    nextPage() {
      let that = this;
      if (that.tablePage.page >= that.tablePage.maxPageNum) {
        that.$Message.error("已经是最后一页");
        return false;
      }
      that.tablePage.page++;
      that.getList();
    },
    changePage() {
      let that = this;
      that.getList();
    },
    getList() {
      let that = this;
      that.tableLoading = true;
      let data = {
        EmployeeID: that.userMes.EmployeeID,
        page: that.tablePage.page,
        size: that.tablePage.pageNum,
        Name: that.formItem.Name,
        DepartmentID: that.formItem.DepartmentName,
        StoreID: that.formItem.StoreID
      };
      // if (that.formItem.Valid === 1) {
      //     data.Valid = true
      // } else if (that.formItem.Valid === 0) {
      //     data.Valid = false
      // }
      manager.getEmployeesList(data).then(response => {
        that.tableLoading = false;
        if (response.error_code === "Success") {
          let res = response.data;
          for (let i of res.list) {
            let phone = i.Phone;
            if (phone) {
              i.Phone =
                phone.substring(0, 3) + "****" + phone.substr(phone.length - 4);
            }
          }
          that.list = res.list;
          that.tablePage.page = res.page;
          that.tablePage.allNum = res.total;
          that.tablePage.maxPageNum = res.totalPage;
          that.setPage();
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    exportTable() {
      let that = this;
      that.$refs.mainTable.exportCsv({
        filename: `${new Date().getTime()}${document.title}`
      });
    },
    getRowID(row) {
      let that = this;
      that.rowID = row.ID;
    },
    getDetail(row) {
      let that = this;
      if (!that.rowID) {
        that.$Message.error("请选择一条记录");
        return false;
      }
      that.resetForm();
      that.$store.commit("changeLoadingPage");
      manager.getSingleEmployees(that.rowID).then(response => {
        that.$store.commit("changeLoadingPage");
        if (response.error_code === "Success") {
          let res = response.data;
          if (!res.HeadImage) {
            res.HeadImage = "";
          } else {
            res.HeadImage = "data:image/jpeg;base64," + res.HeadImage;
          }
          // 修改员工时若存在门店时，门店不可修改
          //2018-11-11  张奕伦  去掉这个限制
          // if (res.StoreID) {
          //     that.canEditStore = false
          // }
          console.log(res);
          that.formValidate = {
            Image: res.HeadImage,
            Birthday: res.Birthday,
            ID: res.ID,
            Name: res.Name,
            DepartmentID: res.DepartmentID,
            PositionID: res.PositionID,
            Sex: res.Sex,
            Phone: res.Phone,
            IDCardNumber: res.IDCardNumber,
            UserName: res.UserName,
            Password: res.Password,
            Valid: res.Valid ? 1 : 0,
            IsConsultation: res.IsConsultation ? 1 : 0,
            StoreID: res.StoreID,
            Remark: res.Remark,
            quyuXZ: [],
            quyuXZMD: []
          };
          that.getPosType = 0;
          //   that.getPosList(res.DepartmentID);
          that.modalTitle = "修改";
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getStoreList() {
      let that = this;
      api.getValidStores().then(response => {
        if (response.error_code === "Success") {
          that.storeList = response.data.list;
        } else {
          this.$Message.error(response.error_message);
        }
      });
    },
    getDepartmentsList() {
      // 获取部门下拉列表
      let that = this;
      manager.getValidDepartmentsList().then(response => {
        if (response.error_code === "Success") {
          that.departmentsList = response.data.list;
        } else {
          this.$Message.error(response.error_message);
        }
      });
    },
    getPosList(val) {
      let that = this;
      if (!val) {
        return false;
      }
      let data = {
        departmentID: val,
        EmployeeID: that.userMes.EmployeeID
      };
      // 更换部门ID时清空职位、门店
      // if (that.modalTitle === '新增') {
      //     that.formValidate.StoreID = ''
      //     that.formValidate.PositionID = ''
      // }
      that.getPosType++;
      // 获取部门门店 修改时清空门店ID
      if (that.getPosType > 1 && that.modalTitle === "新增") {
        that.formValidate.StoreID = "";
      }
      manager.getStoresByDepartmentsID(data).then(response => {
        // 集团部门没有门店
        if (response.error_code === "Success") {
          that.storeList = response.data.list;
          if (response.data.list) {
            that.isGroupDepart = false;
          } else {
            that.isGroupDepart = true;
          }
        } else {
          this.$Message.error(response.error_message);
        }
      });
      //   if (that.getPosType > 1) {
      //     that.formValidate.PositionID = "";
      //   }
      manager.getPositionsByDepartmentID(data).then(response => {
        if (response.error_code === "Success") {
          that.jobList = response.data.list;
          that.modal1 = true;
        } else {
          this.$Message.error(response.error_message);
        }
        //添加联动
        if (val == "00007") {
          that.formValidate.PositionID = "00024";
        }
        if (val == "00008") {
          that.formValidate.PositionID = "00026";
        }
        //------
      });
    },
    changePositionID(val) {
      let that = this;
      if (val == "00034") {
        that.yinC = true;
      } else {
        that.yinC = false;
      }
    },
    uploadImg(e) {
      let that = this;
      let files = e.target.files || e.dataTransfer.files;
      if (!files.length) return;
      this.imgPreview(files[0]);
    },
    imgPreview(file) {
      let that = this;
      let Orientation;
      // 去获取拍照时的信息，解决拍出来的照片旋转问题
      Exif.getData(file, function() {
        Orientation = Exif.getTag(this, "Orientation");
      });
      // 看支持不支持FileReader
      if (!file || !window.FileReader) return;
      if (/^image/.test(file.type)) {
        // 创建一个reader
        let reader = new FileReader();
        // 将图片2将转成 base64 格式
        reader.readAsDataURL(file);
        // 读取成功后的回调
        reader.onloadend = function() {
          let result = this.result;
          let img = new Image();
          img.src = result;
          // 判断图片是否大于100K,是就直接上传，反之压缩图片
          if (this.result.length <= 100 * 1024) {
            that.formValidate.Image = result;
          } else {
            img.onload = function() {
              let data = that.compress(img, Orientation);
              that.formValidate.Image = data;
            };
          }
        };
      }
    },
    rotateImg(img, direction, canvas) {
      // 最小与最大旋转方向，图片旋转4次后回到原方向
      const minStep = 0;
      const maxStep = 3;
      if (img == null) return;
      // img的高度和宽度不能在img元素隐藏后获取，否则会出错
      let height = img.height;
      let width = img.width;
      let step = 2;
      if (step == null) {
        step = minStep;
      }
      if (direction === "right") {
        step++;
        // 旋转到原位置，即超过最大值
        step > maxStep && (step = minStep);
      } else {
        step--;
        step < minStep && (step = maxStep);
      }
      // 旋转角度以弧度值为参数
      let degree = step * 90 * Math.PI / 180;
      let ctx = canvas.getContext("2d");
      switch (step) {
        case 0:
          canvas.width = width;
          canvas.height = height;
          ctx.drawImage(img, 0, 0);
          break;
        case 1:
          canvas.width = height;
          canvas.height = width;
          ctx.rotate(degree);
          ctx.drawImage(img, 0, -height);
          break;
        case 2:
          canvas.width = width;
          canvas.height = height;
          ctx.rotate(degree);
          ctx.drawImage(img, -width, -height);
          break;
        case 3:
          canvas.width = height;
          canvas.height = width;
          ctx.rotate(degree);
          ctx.drawImage(img, -width, 0);
          break;
      }
    },
    compress(img, Orientation) {
      let canvas = document.createElement("canvas");
      let ctx = canvas.getContext("2d");
      // 瓦片canvas
      let tCanvas = document.createElement("canvas");
      let tctx = tCanvas.getContext("2d");
      let initSize = img.src.length;
      let width = img.width;
      let height = img.height;
      // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下
      let ratio;
      if ((ratio = width * height / 4000000) > 1) {
        ratio = Math.sqrt(ratio);
        width /= ratio;
        height /= ratio;
      } else {
        ratio = 1;
      }
      canvas.width = width;
      canvas.height = height;
      // 铺底色
      ctx.fillStyle = "#fff";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      // 如果图片像素大于100万则使用瓦片绘制
      let count;
      if ((count = width * height / 1000000) > 1) {
        count = ~~(Math.sqrt(count) + 1); // 计算要分成多少块瓦片
        // 计算每块瓦片的宽和高
        let nw = ~~(width / count);
        let nh = ~~(height / count);
        tCanvas.width = nw;
        tCanvas.height = nh;
        for (let i = 0; i < count; i++) {
          for (let j = 0; j < count; j++) {
            tctx.drawImage(
              img,
              i * nw * ratio,
              j * nh * ratio,
              nw * ratio,
              nh * ratio,
              0,
              0,
              nw,
              nh
            );
            ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);
          }
        }
      } else {
        ctx.drawImage(img, 0, 0, width, height);
      }
      // 修复ios上传图片的时候 被旋转的问题
      if (Orientation !== "" && Orientation !== 1) {
        switch (Orientation) {
          case 6: // 需要顺时针（向左）90度旋转
            this.rotateImg(img, "left", canvas);
            break;
          case 8: // 需要逆时针（向右）90度旋转
            this.rotateImg(img, "right", canvas);
            break;
          case 3: // 需要180度旋转
            this.rotateImg(img, "right", canvas); // 转两次
            this.rotateImg(img, "right", canvas);
            break;
        }
      }
      // 进行最小压缩
      let ndata = canvas.toDataURL("image/jpeg", 0.5);
      tCanvas.width = tCanvas.height = canvas.width = canvas.height = 0;
      return ndata;
    },
    showRemark(text) {
      // 显示备注
      let that = this;
      that.$Modal.info({
        title: "详情",
        content: text
      });
    },
    getQYList() {
      // 获取区域下拉
      let that = this;
      api.GetAllCityInfo().then(response => {
        if (response.error_code === "Success") {
          that.quYuList = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    },
    getArealsList() {
      // 获取区域门店下拉
      let that = this;
      if (that.formValidate.quyuXZ.length <= 0) {
        that.quYuMenDList = [];
        return;
      }
      let data = {
        listCity: that.formValidate.quyuXZ
      };
      api.getStoreInfoCity(data).then(response => {
        if (response.error_code === "Success") {
          that.quYuMenDList = response.data.list;
        } else {
          that.$Message.error(response.error_message);
        }
      });
    }
  },
  mounted() {
    let that = this;
    that.$nextTick(() => {
      that.initTableHeight();
      that.getList();
      that.getStoreList();
      that.getDepartmentsList();
      that.getQYList();
    });
  }
};
</script>
<style>
.input-box {
  position: relative;
  width: 60px;
  height: 60px;
  border: 2px dashed #dddee1;
  text-align: center;
}
.input-box:hover {
  border-color: #79aa49;
  cursor: pointer;
}
.input-box input[type="file"] {
  position: absolute;
  width: 100%;
  height: 100%;
  outline: none;
  display: block;
  left: 0;
  top: 0;
  opacity: 0;
}
.input-box input[type="file"]:hover {
  cursor: pointer;
}
.input-box > img {
  position: relative;
  vertical-align: top;
  width: 100%;
  height: 100%;
}
.icon-camera {
  font-size: 32px;
  line-height: 60px;
  color: #666;
}
</style>
